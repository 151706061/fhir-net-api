<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0">
  <PropertyGroup>
    <TargetFrameworks>net45;netstandard1.3</TargetFrameworks>
  </PropertyGroup>
  <Import Project="..\platforms.props" />
  <Import Project="..\fhir-net-api.props" />
  <PropertyGroup>
    <PackageId>Hl7.Fhir.Specification.STU3</PackageId>
    <Product>HL7 FHIR Additional functionality support API for STU3</Product>
    <Description>.NET additional support for working with HL7 FHIR. Supports FHIR STU3.</Description>
    <Summary>This library offers additional support beyond core for HL7's FHIR standard (http://hl7.org/fhir). It contains functionality to working with FHIR's specification (meta)data such as profiles, profile-based validation and publication</Summary>
    <PackageTags>HL7 FHIR Profile Metadata Validation Publication Schematron Schema</PackageTags>
    <AssemblyName>Hl7.Fhir.STU3.Specification</AssemblyName>
    <RootNamespace>Hl7.Fhir.Specification</RootNamespace>
    <Version>0.93.0-alpha1</Version>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Hl7.FhirPath" Version="0.4.1" />
    <PackageReference Include="System.ComponentModel" Version="4.3.0" />
    <PackageReference Include="System.ComponentModel.Annotations" Version="4.3.0" />
    <PackageReference Include="System.ComponentModel.Primitives" Version="4.3.0" />
    <PackageReference Include="System.Net.Requests" Version="4.3.0" />
    <PackageReference Include="System.Runtime.Serialization.Primitives" Version="4.3.0" />
  </ItemGroup>
  <ItemGroup>
    <FhirConformance Include="data\*.*" />
  </ItemGroup>
  <ItemGroup>
    <None Remove="install.ps1" />
    <None Remove="specification.zip" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\Hl7.Fhir.Core\Support\Error.cs" Link="Support\Error.cs" />
    <Compile Include="..\Hl7.Fhir.Core\Support\StringExtensions.cs" Link="Support\StringExtensions.cs" />
  </ItemGroup>
  <ItemGroup>
    <Content Include="install.ps1">
      <Pack>true</Pack>
      <PackagePath>tools</PackagePath>
    </Content>
    <Content Include="specification.zip">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Pack>true</Pack>
      <PackagePath>content</PackagePath>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Hl7.Fhir.Core\Hl7.Fhir.STU3.csproj" />
  </ItemGroup>
  <Target Name="BeforeBuild" Inputs="@(FhirConformance)" Outputs="specification.zip">
    <CleanSpecFiles DirectoryName="data" />
    <ZipDir ZipFileName="specification.zip" DirectoryName="data" />
  </Target>
  <UsingTask TaskName="ZipDir" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <ZipFileName ParameterType="System.String" Required="true" />
      <DirectoryName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs"><![CDATA[
		  try
		  {
			Log.LogMessage(string.Format("Zipping Directory {0} to {1}", DirectoryName, ZipFileName));
			if(File.Exists(ZipFileName)) File.Delete(ZipFileName);
			ZipFile.CreateFromDirectory( DirectoryName, ZipFileName );
			return true;
		  }
		  catch(Exception ex)
		  {
			Log.LogErrorFromException(ex);
			return false;
		  }
		]]></Code>
    </Task>
  </UsingTask>
  <UsingTask TaskName="CleanSpecFiles" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <DirectoryName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.XML" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs"><![CDATA[
          try
          {
            Log.LogMessage(string.Format("Cleaning spec files in directory {0}", DirectoryName));

            var fhirns = XNamespace.Get("http://hl7.org/fhir");
            var xmlns = XNamespace.Get("http://www.w3.org/1999/xhtml");
            
            var files = Directory.EnumerateFiles(DirectoryName, "*.xml");

            Log.LogMessage(string.Format("Cleaning {0} files", files.Count()));
            foreach(var file in files)
            {
                var xdoc = XDocument.Load(file);
                var sizeBefore = xdoc.ToString().Length;
                
                var narrative = xdoc.Elements(fhirns + "Bundle").Elements(fhirns + "entry").Elements(fhirns + "resource")
                        .Elements().Elements(fhirns + "text").Elements(xmlns + "div");
                foreach(var narrativeElement in narrative)
                {
                    narrativeElement.RemoveNodes();
                    narrativeElement.Add(new XElement(xmlns + "p",
                        new XText("The narrative has been removed to reduce the size of the distribution of the Hl7.Fhir.Specification library")));
                }

                var sizeAfter = xdoc.ToString().Length;
                Log.LogMessage(string.Format("File {0} shrunk from {1} to {2} bytes", file, sizeBefore, sizeAfter));
                xdoc.Save(file);
            }
          }
          catch(Exception ex)
          {
            Log.LogMessage("Crap!");
            Log.LogErrorFromException(ex);
            return false;
          }
        ]]></Code>
    </Task>
  </UsingTask>
</Project>