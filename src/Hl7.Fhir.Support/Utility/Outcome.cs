using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Hl7.Fhir.Utility
{
    public interface IOutcomeProvider
    {
        IEnumerable<Outcome> GetIssues();
    }


    /// <summary>
    /// Represents the outcome of an operation in the .NET API
    /// </summary>
    /// <remarks>
    /// Many parts of the .NET API process data, during which errors and warnings may occur as a natural
    /// part of the operation. Instead of throwing exceptions in these cases, components of
    /// the library will instead create lists of Outcomes.
    /// </remarks>
    public class Outcome
    {
        /// <summary>
        /// Name of the (part of) the system that generated the error
        /// </summary>
        public string System;

        /// <summary>
        /// A numbered code of the type of issue (unique within
        /// this <see cref="System"/>, which allows callers to categorize issues
        /// and differentiate between issues generated by this subsystem.
        /// </summary>
        public int Code;

        /// <summary>
        /// Nested issues, possibly containing more details about the main issue
        /// </summary>
        public IList<Outcome> Nested;

        /// <summary>
        /// The severity of the issue, possibly 'undecided'
        /// </summary>
        public IssueSeverity Severity;

        /// <summary>
        /// If this is about instance data, the location of the elements involved in the issue
        /// </summary>
        public string[] Locations;

        /// <summary>
        /// Human-readable text detailing the issue
        /// </summary>
        public string Message;

        public string Location
        {
            get => Locations?.First();

            set => Locations = new string[] { value };
        }

    }


    public enum IssueSeverity
    {
        // severities indicating failure
        Fatal,
        Error,

        // severities indicating success
        Warning,
        Information,

        // undecided outcome
        Undecided
    }
}
