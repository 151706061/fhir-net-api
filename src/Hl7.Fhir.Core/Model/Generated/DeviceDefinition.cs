// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 4.6.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// An instance of a medical-related component of a medical device
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("DeviceDefinition","http://hl7.org/fhir/StructureDefinition/DeviceDefinition", IsResource=true)]
  public partial class DeviceDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "DeviceDefinition"; } }

    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#UdiDeviceIdentifier", IsNestedType=true)]
    public partial class UdiDeviceIdentifierComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#UdiDeviceIdentifier"; } }

      /// <summary>
      /// The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier
      /// </summary>
      [FhirElement("deviceIdentifier", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DeviceIdentifierElement
      {
        get { return _DeviceIdentifierElement; }
        set { _DeviceIdentifierElement = value; OnPropertyChanged("DeviceIdentifierElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DeviceIdentifierElement;

      /// <summary>
      /// The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DeviceIdentifier
      {
        get { return DeviceIdentifierElement != null ? DeviceIdentifierElement.Value : null; }
        set
        {
          if (value == null)
            DeviceIdentifierElement = null;
          else
            DeviceIdentifierElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("DeviceIdentifier");
        }
      }

      /// <summary>
      /// The organization that assigns the identifier algorithm
      /// </summary>
      [FhirElement("issuer", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri IssuerElement
      {
        get { return _IssuerElement; }
        set { _IssuerElement = value; OnPropertyChanged("IssuerElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _IssuerElement;

      /// <summary>
      /// The organization that assigns the identifier algorithm
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Issuer
      {
        get { return IssuerElement != null ? IssuerElement.Value : null; }
        set
        {
          if (value == null)
            IssuerElement = null;
          else
            IssuerElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Issuer");
        }
      }

      /// <summary>
      /// The jurisdiction to which the deviceIdentifier applies
      /// </summary>
      [FhirElement("jurisdiction", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri JurisdictionElement
      {
        get { return _JurisdictionElement; }
        set { _JurisdictionElement = value; OnPropertyChanged("JurisdictionElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _JurisdictionElement;

      /// <summary>
      /// The jurisdiction to which the deviceIdentifier applies
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Jurisdiction
      {
        get { return JurisdictionElement != null ? JurisdictionElement.Value : null; }
        set
        {
          if (value == null)
            JurisdictionElement = null;
          else
            JurisdictionElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Jurisdiction");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as UdiDeviceIdentifierComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DeviceIdentifierElement != null) dest.DeviceIdentifierElement = (Hl7.Fhir.Model.FhirString)DeviceIdentifierElement.DeepCopy();
        if(IssuerElement != null) dest.IssuerElement = (Hl7.Fhir.Model.FhirUri)IssuerElement.DeepCopy();
        if(JurisdictionElement != null) dest.JurisdictionElement = (Hl7.Fhir.Model.FhirUri)JurisdictionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new UdiDeviceIdentifierComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as UdiDeviceIdentifierComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.Matches(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.Matches(JurisdictionElement, otherT.JurisdictionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as UdiDeviceIdentifierComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.IsExactly(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.IsExactly(JurisdictionElement, otherT.JurisdictionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DeviceIdentifierElement != null) yield return DeviceIdentifierElement;
          if (IssuerElement != null) yield return IssuerElement;
          if (JurisdictionElement != null) yield return JurisdictionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DeviceIdentifierElement != null) yield return new ElementValue("deviceIdentifier", DeviceIdentifierElement);
          if (IssuerElement != null) yield return new ElementValue("issuer", IssuerElement);
          if (JurisdictionElement != null) yield return new ElementValue("jurisdiction", JurisdictionElement);
        }
      }

    }

    /// <summary>
    /// The name or names of the device as given by the manufacturer
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#DeviceName", IsNestedType=true)]
    public partial class DeviceNameComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#DeviceName"; } }

      /// <summary>
      /// A name that is used to refer to the device
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// A name that is used to refer to the device
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// udi-label-name | user-friendly-name | patient-reported-name | manufacturer-name | model-name | other
      /// </summary>
      [FhirElement("type", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.DeviceNameType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.DeviceNameType> _TypeElement;

      /// <summary>
      /// udi-label-name | user-friendly-name | patient-reported-name | manufacturer-name | model-name | other
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.DeviceNameType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.DeviceNameType>(value);
          OnPropertyChanged("Type");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DeviceNameComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.DeviceNameType>)TypeElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DeviceNameComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DeviceNameComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DeviceNameComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (TypeElement != null) yield return TypeElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        }
      }

    }

    /// <summary>
    /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Specialization", IsNestedType=true)]
    public partial class SpecializationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Specialization"; } }

      /// <summary>
      /// The standard that is used to operate and communicate
      /// </summary>
      [FhirElement("systemType", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString SystemTypeElement
      {
        get { return _SystemTypeElement; }
        set { _SystemTypeElement = value; OnPropertyChanged("SystemTypeElement"); }
      }

      private Hl7.Fhir.Model.FhirString _SystemTypeElement;

      /// <summary>
      /// The standard that is used to operate and communicate
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string SystemType
      {
        get { return SystemTypeElement != null ? SystemTypeElement.Value : null; }
        set
        {
          if (value == null)
            SystemTypeElement = null;
          else
            SystemTypeElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("SystemType");
        }
      }

      /// <summary>
      /// The version of the standard that is used to operate and communicate
      /// </summary>
      [FhirElement("version", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString VersionElement
      {
        get { return _VersionElement; }
        set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _VersionElement;

      /// <summary>
      /// The version of the standard that is used to operate and communicate
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Version
      {
        get { return VersionElement != null ? VersionElement.Value : null; }
        set
        {
          if (value == null)
            VersionElement = null;
          else
            VersionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Version");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SpecializationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SystemTypeElement != null) dest.SystemTypeElement = (Hl7.Fhir.Model.FhirString)SystemTypeElement.DeepCopy();
        if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SpecializationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SpecializationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SystemTypeElement, otherT.SystemTypeElement)) return false;
        if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SpecializationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SystemTypeElement, otherT.SystemTypeElement)) return false;
        if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SystemTypeElement != null) yield return SystemTypeElement;
          if (VersionElement != null) yield return VersionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SystemTypeElement != null) yield return new ElementValue("systemType", SystemTypeElement);
          if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        }
      }

    }

    /// <summary>
    /// A device, part of the current one
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#HasPart", IsNestedType=true)]
    public partial class HasPartComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#HasPart"; } }

      /// <summary>
      /// Reference to the part
      /// </summary>
      [FhirElement("reference", Order=40)]
      [CLSCompliant(false)]
      [References("DeviceDefinition")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Reference
      {
        get { return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Reference;

      /// <summary>
      /// Number of occurrences of the part
      /// </summary>
      [FhirElement("count", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Integer CountElement
      {
        get { return _CountElement; }
        set { _CountElement = value; OnPropertyChanged("CountElement"); }
      }

      private Hl7.Fhir.Model.Integer _CountElement;

      /// <summary>
      /// Number of occurrences of the part
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Count
      {
        get { return CountElement != null ? CountElement.Value : null; }
        set
        {
          if (value == null)
            CountElement = null;
          else
            CountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Count");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as HasPartComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Reference != null) dest.Reference = (Hl7.Fhir.Model.ResourceReference)Reference.DeepCopy();
        if(CountElement != null) dest.CountElement = (Hl7.Fhir.Model.Integer)CountElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new HasPartComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as HasPartComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;
        if( !DeepComparable.Matches(CountElement, otherT.CountElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as HasPartComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;
        if( !DeepComparable.IsExactly(CountElement, otherT.CountElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Reference != null) yield return Reference;
          if (CountElement != null) yield return CountElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Reference != null) yield return new ElementValue("reference", Reference);
          if (CountElement != null) yield return new ElementValue("count", CountElement);
        }
      }

    }

    /// <summary>
    /// Information about the packaging of the device, i.e. how the device is packaged
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Packaging", IsNestedType=true)]
    public partial class PackagingComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Packaging"; } }

      /// <summary>
      /// Business identifier of the packaged medication
      /// </summary>
      [FhirElement("identifier", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// A code that defines the specific type of packaging
      /// </summary>
      [FhirElement("type", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The number of items contained in the package (devices or sub-packages)
      /// </summary>
      [FhirElement("count", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer CountElement
      {
        get { return _CountElement; }
        set { _CountElement = value; OnPropertyChanged("CountElement"); }
      }

      private Hl7.Fhir.Model.Integer _CountElement;

      /// <summary>
      /// The number of items contained in the package (devices or sub-packages)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Count
      {
        get { return CountElement != null ? CountElement.Value : null; }
        set
        {
          if (value == null)
            CountElement = null;
          else
            CountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Count");
        }
      }

      /// <summary>
      /// An organization that distributes the packaged device
      /// </summary>
      [FhirElement("distributor", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.DeviceDefinition.PackagingDistributorComponent> Distributor
      {
        get { if(_Distributor==null) _Distributor = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingDistributorComponent>(); return _Distributor; }
        set { _Distributor = value; OnPropertyChanged("Distributor"); }
      }

      private List<Hl7.Fhir.Model.DeviceDefinition.PackagingDistributorComponent> _Distributor;

      /// <summary>
      /// Unique Device Identifier (UDI) Barcode string on the packaging
      /// </summary>
      [FhirElement("udiDeviceIdentifier", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierComponent> UdiDeviceIdentifier
      {
        get { if(_UdiDeviceIdentifier==null) _UdiDeviceIdentifier = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierComponent>(); return _UdiDeviceIdentifier; }
        set { _UdiDeviceIdentifier = value; OnPropertyChanged("UdiDeviceIdentifier"); }
      }

      private List<Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierComponent> _UdiDeviceIdentifier;

      /// <summary>
      /// Allows packages within packages
      /// </summary>
      [FhirElement("packaging", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent> Packaging
      {
        get { if(_Packaging==null) _Packaging = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent>(); return _Packaging; }
        set { _Packaging = value; OnPropertyChanged("Packaging"); }
      }

      private List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent> _Packaging;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PackagingComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(CountElement != null) dest.CountElement = (Hl7.Fhir.Model.Integer)CountElement.DeepCopy();
        if(Distributor != null) dest.Distributor = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingDistributorComponent>(Distributor.DeepCopy());
        if(UdiDeviceIdentifier != null) dest.UdiDeviceIdentifier = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierComponent>(UdiDeviceIdentifier.DeepCopy());
        if(Packaging != null) dest.Packaging = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent>(Packaging.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PackagingComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PackagingComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.Matches(Distributor, otherT.Distributor)) return false;
        if( !DeepComparable.Matches(UdiDeviceIdentifier, otherT.UdiDeviceIdentifier)) return false;
        if( !DeepComparable.Matches(Packaging, otherT.Packaging)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PackagingComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.IsExactly(Distributor, otherT.Distributor)) return false;
        if( !DeepComparable.IsExactly(UdiDeviceIdentifier, otherT.UdiDeviceIdentifier)) return false;
        if( !DeepComparable.IsExactly(Packaging, otherT.Packaging)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Identifier != null) yield return Identifier;
          if (Type != null) yield return Type;
          if (CountElement != null) yield return CountElement;
          foreach (var elem in Distributor) { if (elem != null) yield return elem; }
          foreach (var elem in UdiDeviceIdentifier) { if (elem != null) yield return elem; }
          foreach (var elem in Packaging) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (Type != null) yield return new ElementValue("type", Type);
          if (CountElement != null) yield return new ElementValue("count", CountElement);
          foreach (var elem in Distributor) { if (elem != null) yield return new ElementValue("distributor", elem); }
          foreach (var elem in UdiDeviceIdentifier) { if (elem != null) yield return new ElementValue("udiDeviceIdentifier", elem); }
          foreach (var elem in Packaging) { if (elem != null) yield return new ElementValue("packaging", elem); }
        }
      }

    }

    /// <summary>
    /// An organization that distributes the packaged device
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#PackagingDistributor", IsNestedType=true)]
    public partial class PackagingDistributorComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#PackagingDistributor"; } }

      /// <summary>
      /// Distributor's human-readable name
      /// </summary>
      [FhirElement("name", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Distributor's human-readable name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Distributor as an Organization resource
      /// </summary>
      [FhirElement("organizationReference", Order=50)]
      [CLSCompliant(false)]
      [References("Organization")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> OrganizationReference
      {
        get { if(_OrganizationReference==null) _OrganizationReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _OrganizationReference; }
        set { _OrganizationReference = value; OnPropertyChanged("OrganizationReference"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _OrganizationReference;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PackagingDistributorComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(OrganizationReference != null) dest.OrganizationReference = new List<Hl7.Fhir.Model.ResourceReference>(OrganizationReference.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PackagingDistributorComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PackagingDistributorComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(OrganizationReference, otherT.OrganizationReference)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PackagingDistributorComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(OrganizationReference, otherT.OrganizationReference)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          foreach (var elem in OrganizationReference) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          foreach (var elem in OrganizationReference) { if (elem != null) yield return new ElementValue("organizationReference", elem); }
        }
      }

    }

    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string on the packaging
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#PackagingUdiDeviceIdentifier", IsNestedType=true)]
    public partial class PackagingUdiDeviceIdentifierComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#PackagingUdiDeviceIdentifier"; } }

      /// <summary>
      /// Identifier to be associated with every instance for issuer and jurisdiction
      /// </summary>
      [FhirElement("deviceIdentifier", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DeviceIdentifierElement
      {
        get { return _DeviceIdentifierElement; }
        set { _DeviceIdentifierElement = value; OnPropertyChanged("DeviceIdentifierElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DeviceIdentifierElement;

      /// <summary>
      /// Identifier to be associated with every instance for issuer and jurisdiction
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DeviceIdentifier
      {
        get { return DeviceIdentifierElement != null ? DeviceIdentifierElement.Value : null; }
        set
        {
          if (value == null)
            DeviceIdentifierElement = null;
          else
            DeviceIdentifierElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("DeviceIdentifier");
        }
      }

      /// <summary>
      /// The organization that assigns the identifier algorithm
      /// </summary>
      [FhirElement("issuer", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri IssuerElement
      {
        get { return _IssuerElement; }
        set { _IssuerElement = value; OnPropertyChanged("IssuerElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _IssuerElement;

      /// <summary>
      /// The organization that assigns the identifier algorithm
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Issuer
      {
        get { return IssuerElement != null ? IssuerElement.Value : null; }
        set
        {
          if (value == null)
            IssuerElement = null;
          else
            IssuerElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Issuer");
        }
      }

      /// <summary>
      /// The jurisdiction to which the deviceIdentifier applies
      /// </summary>
      [FhirElement("jurisdiction", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri JurisdictionElement
      {
        get { return _JurisdictionElement; }
        set { _JurisdictionElement = value; OnPropertyChanged("JurisdictionElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _JurisdictionElement;

      /// <summary>
      /// The jurisdiction to which the deviceIdentifier applies
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Jurisdiction
      {
        get { return JurisdictionElement != null ? JurisdictionElement.Value : null; }
        set
        {
          if (value == null)
            JurisdictionElement = null;
          else
            JurisdictionElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Jurisdiction");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PackagingUdiDeviceIdentifierComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DeviceIdentifierElement != null) dest.DeviceIdentifierElement = (Hl7.Fhir.Model.FhirString)DeviceIdentifierElement.DeepCopy();
        if(IssuerElement != null) dest.IssuerElement = (Hl7.Fhir.Model.FhirUri)IssuerElement.DeepCopy();
        if(JurisdictionElement != null) dest.JurisdictionElement = (Hl7.Fhir.Model.FhirUri)JurisdictionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PackagingUdiDeviceIdentifierComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PackagingUdiDeviceIdentifierComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.Matches(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.Matches(JurisdictionElement, otherT.JurisdictionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PackagingUdiDeviceIdentifierComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.IsExactly(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.IsExactly(JurisdictionElement, otherT.JurisdictionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DeviceIdentifierElement != null) yield return DeviceIdentifierElement;
          if (IssuerElement != null) yield return IssuerElement;
          if (JurisdictionElement != null) yield return JurisdictionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DeviceIdentifierElement != null) yield return new ElementValue("deviceIdentifier", DeviceIdentifierElement);
          if (IssuerElement != null) yield return new ElementValue("issuer", IssuerElement);
          if (JurisdictionElement != null) yield return new ElementValue("jurisdiction", JurisdictionElement);
        }
      }

    }

    /// <summary>
    /// The version of the device or software
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Version", IsNestedType=true)]
    public partial class VersionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Version"; } }

      /// <summary>
      /// The type of the device version, e.g. manufacturer, approved, internal
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The hardware or software module of the device to which the version applies
      /// </summary>
      [FhirElement("component", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Component
      {
        get { return _Component; }
        set { _Component = value; OnPropertyChanged("Component"); }
      }

      private Hl7.Fhir.Model.Identifier _Component;

      /// <summary>
      /// The version text
      /// </summary>
      [FhirElement("value", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// The version text
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VersionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Component != null) dest.Component = (Hl7.Fhir.Model.Identifier)Component.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VersionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VersionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Component, otherT.Component)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VersionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Component, otherT.Component)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Component != null) yield return Component;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Component != null) yield return new ElementValue("component", Component);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

    }

    /// <summary>
    /// Additional capabilities of the device
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Capability", IsNestedType=true)]
    public partial class CapabilityComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Capability"; } }

      /// <summary>
      /// The type of capability - whether it is a physical attribute, a customization needed
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The actual capability of the device
      /// </summary>
      [FhirElement("description", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Description
      {
        get { if(_Description==null) _Description = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Description; }
        set { _Description = value; OnPropertyChanged("Description"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Description;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CapabilityComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Description != null) dest.Description = new List<Hl7.Fhir.Model.CodeableConcept>(Description.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CapabilityComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CapabilityComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Description, otherT.Description)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CapabilityComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Description) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Description) { if (elem != null) yield return new ElementValue("description", elem); }
        }
      }

    }

    /// <summary>
    /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Property", IsNestedType=true)]
    public partial class PropertyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Property"; } }

      /// <summary>
      /// Code that specifies the property DeviceDefinitionPropetyCode (Extensible)
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Property value as a quantity
      /// </summary>
      [FhirElement("valueQuantity", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Quantity> ValueQuantity
      {
        get { if(_ValueQuantity==null) _ValueQuantity = new List<Hl7.Fhir.Model.Quantity>(); return _ValueQuantity; }
        set { _ValueQuantity = value; OnPropertyChanged("ValueQuantity"); }
      }

      private List<Hl7.Fhir.Model.Quantity> _ValueQuantity;

      /// <summary>
      /// Property value as a code, e.g., NTP4 (synced to NTP)
      /// </summary>
      [FhirElement("valueCode", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ValueCode
      {
        get { if(_ValueCode==null) _ValueCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ValueCode; }
        set { _ValueCode = value; OnPropertyChanged("ValueCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ValueCode;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PropertyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(ValueQuantity != null) dest.ValueQuantity = new List<Hl7.Fhir.Model.Quantity>(ValueQuantity.DeepCopy());
        if(ValueCode != null) dest.ValueCode = new List<Hl7.Fhir.Model.CodeableConcept>(ValueCode.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PropertyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(ValueQuantity, otherT.ValueQuantity)) return false;
        if( !DeepComparable.Matches(ValueCode, otherT.ValueCode)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(ValueQuantity, otherT.ValueQuantity)) return false;
        if( !DeepComparable.IsExactly(ValueCode, otherT.ValueCode)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in ValueQuantity) { if (elem != null) yield return elem; }
          foreach (var elem in ValueCode) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in ValueQuantity) { if (elem != null) yield return new ElementValue("valueQuantity", elem); }
          foreach (var elem in ValueCode) { if (elem != null) yield return new ElementValue("valueCode", elem); }
        }
      }

    }

    /// <summary>
    /// A substance used to create the material(s) of which the device is made
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Material", IsNestedType=true)]
    public partial class MaterialComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Material"; } }

      /// <summary>
      /// A relevant substance that the device contains, may contain, or is made of
      /// </summary>
      [FhirElement("substance", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Substance
      {
        get { return _Substance; }
        set { _Substance = value; OnPropertyChanged("Substance"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Substance;

      /// <summary>
      /// Indicates an alternative material of the device
      /// </summary>
      [FhirElement("alternate", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AlternateElement
      {
        get { return _AlternateElement; }
        set { _AlternateElement = value; OnPropertyChanged("AlternateElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AlternateElement;

      /// <summary>
      /// Indicates an alternative material of the device
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Alternate
      {
        get { return AlternateElement != null ? AlternateElement.Value : null; }
        set
        {
          if (value == null)
            AlternateElement = null;
          else
            AlternateElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Alternate");
        }
      }

      /// <summary>
      /// Whether the substance is a known or suspected allergen
      /// </summary>
      [FhirElement("allergenicIndicator", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AllergenicIndicatorElement
      {
        get { return _AllergenicIndicatorElement; }
        set { _AllergenicIndicatorElement = value; OnPropertyChanged("AllergenicIndicatorElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AllergenicIndicatorElement;

      /// <summary>
      /// Whether the substance is a known or suspected allergen
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? AllergenicIndicator
      {
        get { return AllergenicIndicatorElement != null ? AllergenicIndicatorElement.Value : null; }
        set
        {
          if (value == null)
            AllergenicIndicatorElement = null;
          else
            AllergenicIndicatorElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("AllergenicIndicator");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MaterialComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Substance != null) dest.Substance = (Hl7.Fhir.Model.CodeableConcept)Substance.DeepCopy();
        if(AlternateElement != null) dest.AlternateElement = (Hl7.Fhir.Model.FhirBoolean)AlternateElement.DeepCopy();
        if(AllergenicIndicatorElement != null) dest.AllergenicIndicatorElement = (Hl7.Fhir.Model.FhirBoolean)AllergenicIndicatorElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MaterialComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MaterialComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Substance, otherT.Substance)) return false;
        if( !DeepComparable.Matches(AlternateElement, otherT.AlternateElement)) return false;
        if( !DeepComparable.Matches(AllergenicIndicatorElement, otherT.AllergenicIndicatorElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MaterialComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Substance, otherT.Substance)) return false;
        if( !DeepComparable.IsExactly(AlternateElement, otherT.AlternateElement)) return false;
        if( !DeepComparable.IsExactly(AllergenicIndicatorElement, otherT.AllergenicIndicatorElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Substance != null) yield return Substance;
          if (AlternateElement != null) yield return AlternateElement;
          if (AllergenicIndicatorElement != null) yield return AllergenicIndicatorElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Substance != null) yield return new ElementValue("substance", Substance);
          if (AlternateElement != null) yield return new ElementValue("alternate", AlternateElement);
          if (AllergenicIndicatorElement != null) yield return new ElementValue("allergenicIndicator", AllergenicIndicatorElement);
        }
      }

    }

    /// <summary>
    /// Instance identifier
    /// </summary>
    [FhirElement("identifier", Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string
    /// </summary>
    [FhirElement("udiDeviceIdentifier", Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent> UdiDeviceIdentifier
    {
      get { if(_UdiDeviceIdentifier==null) _UdiDeviceIdentifier = new List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent>(); return _UdiDeviceIdentifier; }
      set { _UdiDeviceIdentifier = value; OnPropertyChanged("UdiDeviceIdentifier"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent> _UdiDeviceIdentifier;

    /// <summary>
    /// Name of device manufacturer
    /// </summary>
    [FhirElement("manufacturer", Order=110, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Organization")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.ResourceReference))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Manufacturer
    {
      get { return _Manufacturer; }
      set { _Manufacturer = value; OnPropertyChanged("Manufacturer"); }
    }

    private Hl7.Fhir.Model.DataType _Manufacturer;

    /// <summary>
    /// The name or names of the device as given by the manufacturer
    /// </summary>
    [FhirElement("deviceName", Order=120)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent> DeviceName
    {
      get { if(_DeviceName==null) _DeviceName = new List<Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent>(); return _DeviceName; }
      set { _DeviceName = value; OnPropertyChanged("DeviceName"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent> _DeviceName;

    /// <summary>
    /// The catalog or model number for the device for example as defined by the manufacturer
    /// </summary>
    [FhirElement("modelNumber", Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ModelNumberElement
    {
      get { return _ModelNumberElement; }
      set { _ModelNumberElement = value; OnPropertyChanged("ModelNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ModelNumberElement;

    /// <summary>
    /// The catalog or model number for the device for example as defined by the manufacturer
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ModelNumber
    {
      get { return ModelNumberElement != null ? ModelNumberElement.Value : null; }
      set
      {
        if (value == null)
          ModelNumberElement = null;
        else
          ModelNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("ModelNumber");
      }
    }

    /// <summary>
    /// What kind of device or device system this is
    /// </summary>
    [FhirElement("type", Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Type
    {
      get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Type;

    /// <summary>
    /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication
    /// </summary>
    [FhirElement("specialization", Order=150)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent> Specialization
    {
      get { if(_Specialization==null) _Specialization = new List<Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent>(); return _Specialization; }
      set { _Specialization = value; OnPropertyChanged("Specialization"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent> _Specialization;

    /// <summary>
    /// A device, part of the current one
    /// </summary>
    [FhirElement("hasPart", Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.HasPartComponent> HasPart
    {
      get { if(_HasPart==null) _HasPart = new List<Hl7.Fhir.Model.DeviceDefinition.HasPartComponent>(); return _HasPart; }
      set { _HasPart = value; OnPropertyChanged("HasPart"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.HasPartComponent> _HasPart;

    /// <summary>
    /// Information about the packaging of the device, i.e. how the device is packaged
    /// </summary>
    [FhirElement("packaging", Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent> Packaging
    {
      get { if(_Packaging==null) _Packaging = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent>(); return _Packaging; }
      set { _Packaging = value; OnPropertyChanged("Packaging"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent> _Packaging;

    /// <summary>
    /// The version of the device or software
    /// </summary>
    [FhirElement("version", Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.VersionComponent> Version
    {
      get { if(_Version==null) _Version = new List<Hl7.Fhir.Model.DeviceDefinition.VersionComponent>(); return _Version; }
      set { _Version = value; OnPropertyChanged("Version"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.VersionComponent> _Version;

    /// <summary>
    /// Safety characteristics of the device
    /// </summary>
    [FhirElement("safety", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Safety
    {
      get { if(_Safety==null) _Safety = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Safety; }
      set { _Safety = value; OnPropertyChanged("Safety"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Safety;

    /// <summary>
    /// Shelf Life and storage information
    /// </summary>
    [FhirElement("shelfLifeStorage", Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ProductShelfLife> ShelfLifeStorage
    {
      get { if(_ShelfLifeStorage==null) _ShelfLifeStorage = new List<Hl7.Fhir.Model.ProductShelfLife>(); return _ShelfLifeStorage; }
      set { _ShelfLifeStorage = value; OnPropertyChanged("ShelfLifeStorage"); }
    }

    private List<Hl7.Fhir.Model.ProductShelfLife> _ShelfLifeStorage;

    /// <summary>
    /// Physical characteristics to define or specify the product - for example dimensions, color etc.
    /// </summary>
    [FhirElement("physicalCharacteristics", Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.ProdCharacteristic PhysicalCharacteristics
    {
      get { return _PhysicalCharacteristics; }
      set { _PhysicalCharacteristics = value; OnPropertyChanged("PhysicalCharacteristics"); }
    }

    private Hl7.Fhir.Model.ProdCharacteristic _PhysicalCharacteristics;

    /// <summary>
    /// Language code for the human-readable text strings produced by the device (all supported)
    /// </summary>
    [FhirElement("languageCode", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> LanguageCode
    {
      get { if(_LanguageCode==null) _LanguageCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _LanguageCode; }
      set { _LanguageCode = value; OnPropertyChanged("LanguageCode"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _LanguageCode;

    /// <summary>
    /// Additional capabilities of the device
    /// </summary>
    [FhirElement("capability", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent> Capability
    {
      get { if(_Capability==null) _Capability = new List<Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent>(); return _Capability; }
      set { _Capability = value; OnPropertyChanged("Capability"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent> _Capability;

    /// <summary>
    /// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties
    /// </summary>
    [FhirElement("property", Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.PropertyComponent> Property
    {
      get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.DeviceDefinition.PropertyComponent>(); return _Property; }
      set { _Property = value; OnPropertyChanged("Property"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.PropertyComponent> _Property;

    /// <summary>
    /// Organization responsible for device
    /// </summary>
    [FhirElement("owner", Order=250)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Owner
    {
      get { return _Owner; }
      set { _Owner = value; OnPropertyChanged("Owner"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Owner;

    /// <summary>
    /// Details for human/organization for support
    /// </summary>
    [FhirElement("contact", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactPoint> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactPoint>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactPoint> _Contact;

    /// <summary>
    /// Access to on-line information
    /// </summary>
    [FhirElement("onlineInformation", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri OnlineInformationElement
    {
      get { return _OnlineInformationElement; }
      set { _OnlineInformationElement = value; OnPropertyChanged("OnlineInformationElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _OnlineInformationElement;

    /// <summary>
    /// Access to on-line information
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string OnlineInformation
    {
      get { return OnlineInformationElement != null ? OnlineInformationElement.Value : null; }
      set
      {
        if (value == null)
          OnlineInformationElement = null;
        else
          OnlineInformationElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("OnlineInformation");
      }
    }

    /// <summary>
    /// Device notes and comments
    /// </summary>
    [FhirElement("note", Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// The parent device it can be part of
    /// </summary>
    [FhirElement("parentDevice", InSummary=true, Order=290)]
    [CLSCompliant(false)]
    [References("DeviceDefinition")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ParentDevice
    {
      get { return _ParentDevice; }
      set { _ParentDevice = value; OnPropertyChanged("ParentDevice"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ParentDevice;

    /// <summary>
    /// A substance used to create the material(s) of which the device is made
    /// </summary>
    [FhirElement("material", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.MaterialComponent> Material
    {
      get { if(_Material==null) _Material = new List<Hl7.Fhir.Model.DeviceDefinition.MaterialComponent>(); return _Material; }
      set { _Material = value; OnPropertyChanged("Material"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.MaterialComponent> _Material;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as DeviceDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(UdiDeviceIdentifier != null) dest.UdiDeviceIdentifier = new List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent>(UdiDeviceIdentifier.DeepCopy());
      if(Manufacturer != null) dest.Manufacturer = (Hl7.Fhir.Model.DataType)Manufacturer.DeepCopy();
      if(DeviceName != null) dest.DeviceName = new List<Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent>(DeviceName.DeepCopy());
      if(ModelNumberElement != null) dest.ModelNumberElement = (Hl7.Fhir.Model.FhirString)ModelNumberElement.DeepCopy();
      if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
      if(Specialization != null) dest.Specialization = new List<Hl7.Fhir.Model.DeviceDefinition.SpecializationComponent>(Specialization.DeepCopy());
      if(HasPart != null) dest.HasPart = new List<Hl7.Fhir.Model.DeviceDefinition.HasPartComponent>(HasPart.DeepCopy());
      if(Packaging != null) dest.Packaging = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent>(Packaging.DeepCopy());
      if(Version != null) dest.Version = new List<Hl7.Fhir.Model.DeviceDefinition.VersionComponent>(Version.DeepCopy());
      if(Safety != null) dest.Safety = new List<Hl7.Fhir.Model.CodeableConcept>(Safety.DeepCopy());
      if(ShelfLifeStorage != null) dest.ShelfLifeStorage = new List<Hl7.Fhir.Model.ProductShelfLife>(ShelfLifeStorage.DeepCopy());
      if(PhysicalCharacteristics != null) dest.PhysicalCharacteristics = (Hl7.Fhir.Model.ProdCharacteristic)PhysicalCharacteristics.DeepCopy();
      if(LanguageCode != null) dest.LanguageCode = new List<Hl7.Fhir.Model.CodeableConcept>(LanguageCode.DeepCopy());
      if(Capability != null) dest.Capability = new List<Hl7.Fhir.Model.DeviceDefinition.CapabilityComponent>(Capability.DeepCopy());
      if(Property != null) dest.Property = new List<Hl7.Fhir.Model.DeviceDefinition.PropertyComponent>(Property.DeepCopy());
      if(Owner != null) dest.Owner = (Hl7.Fhir.Model.ResourceReference)Owner.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactPoint>(Contact.DeepCopy());
      if(OnlineInformationElement != null) dest.OnlineInformationElement = (Hl7.Fhir.Model.FhirUri)OnlineInformationElement.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(ParentDevice != null) dest.ParentDevice = (Hl7.Fhir.Model.ResourceReference)ParentDevice.DeepCopy();
      if(Material != null) dest.Material = new List<Hl7.Fhir.Model.DeviceDefinition.MaterialComponent>(Material.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new DeviceDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as DeviceDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(UdiDeviceIdentifier, otherT.UdiDeviceIdentifier)) return false;
      if( !DeepComparable.Matches(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.Matches(DeviceName, otherT.DeviceName)) return false;
      if( !DeepComparable.Matches(ModelNumberElement, otherT.ModelNumberElement)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(Specialization, otherT.Specialization)) return false;
      if( !DeepComparable.Matches(HasPart, otherT.HasPart)) return false;
      if( !DeepComparable.Matches(Packaging, otherT.Packaging)) return false;
      if( !DeepComparable.Matches(Version, otherT.Version)) return false;
      if( !DeepComparable.Matches(Safety, otherT.Safety)) return false;
      if( !DeepComparable.Matches(ShelfLifeStorage, otherT.ShelfLifeStorage)) return false;
      if( !DeepComparable.Matches(PhysicalCharacteristics, otherT.PhysicalCharacteristics)) return false;
      if( !DeepComparable.Matches(LanguageCode, otherT.LanguageCode)) return false;
      if( !DeepComparable.Matches(Capability, otherT.Capability)) return false;
      if( !DeepComparable.Matches(Property, otherT.Property)) return false;
      if( !DeepComparable.Matches(Owner, otherT.Owner)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(OnlineInformationElement, otherT.OnlineInformationElement)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(ParentDevice, otherT.ParentDevice)) return false;
      if( !DeepComparable.Matches(Material, otherT.Material)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as DeviceDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(UdiDeviceIdentifier, otherT.UdiDeviceIdentifier)) return false;
      if( !DeepComparable.IsExactly(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.IsExactly(DeviceName, otherT.DeviceName)) return false;
      if( !DeepComparable.IsExactly(ModelNumberElement, otherT.ModelNumberElement)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(Specialization, otherT.Specialization)) return false;
      if( !DeepComparable.IsExactly(HasPart, otherT.HasPart)) return false;
      if( !DeepComparable.IsExactly(Packaging, otherT.Packaging)) return false;
      if( !DeepComparable.IsExactly(Version, otherT.Version)) return false;
      if( !DeepComparable.IsExactly(Safety, otherT.Safety)) return false;
      if( !DeepComparable.IsExactly(ShelfLifeStorage, otherT.ShelfLifeStorage)) return false;
      if( !DeepComparable.IsExactly(PhysicalCharacteristics, otherT.PhysicalCharacteristics)) return false;
      if( !DeepComparable.IsExactly(LanguageCode, otherT.LanguageCode)) return false;
      if( !DeepComparable.IsExactly(Capability, otherT.Capability)) return false;
      if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
      if( !DeepComparable.IsExactly(Owner, otherT.Owner)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(OnlineInformationElement, otherT.OnlineInformationElement)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(ParentDevice, otherT.ParentDevice)) return false;
      if( !DeepComparable.IsExactly(Material, otherT.Material)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in UdiDeviceIdentifier) { if (elem != null) yield return elem; }
        if (Manufacturer != null) yield return Manufacturer;
        foreach (var elem in DeviceName) { if (elem != null) yield return elem; }
        if (ModelNumberElement != null) yield return ModelNumberElement;
        foreach (var elem in Type) { if (elem != null) yield return elem; }
        foreach (var elem in Specialization) { if (elem != null) yield return elem; }
        foreach (var elem in HasPart) { if (elem != null) yield return elem; }
        foreach (var elem in Packaging) { if (elem != null) yield return elem; }
        foreach (var elem in Version) { if (elem != null) yield return elem; }
        foreach (var elem in Safety) { if (elem != null) yield return elem; }
        foreach (var elem in ShelfLifeStorage) { if (elem != null) yield return elem; }
        if (PhysicalCharacteristics != null) yield return PhysicalCharacteristics;
        foreach (var elem in LanguageCode) { if (elem != null) yield return elem; }
        foreach (var elem in Capability) { if (elem != null) yield return elem; }
        foreach (var elem in Property) { if (elem != null) yield return elem; }
        if (Owner != null) yield return Owner;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (OnlineInformationElement != null) yield return OnlineInformationElement;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        if (ParentDevice != null) yield return ParentDevice;
        foreach (var elem in Material) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in UdiDeviceIdentifier) { if (elem != null) yield return new ElementValue("udiDeviceIdentifier", elem); }
        if (Manufacturer != null) yield return new ElementValue("manufacturer", Manufacturer);
        foreach (var elem in DeviceName) { if (elem != null) yield return new ElementValue("deviceName", elem); }
        if (ModelNumberElement != null) yield return new ElementValue("modelNumber", ModelNumberElement);
        foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
        foreach (var elem in Specialization) { if (elem != null) yield return new ElementValue("specialization", elem); }
        foreach (var elem in HasPart) { if (elem != null) yield return new ElementValue("hasPart", elem); }
        foreach (var elem in Packaging) { if (elem != null) yield return new ElementValue("packaging", elem); }
        foreach (var elem in Version) { if (elem != null) yield return new ElementValue("version", elem); }
        foreach (var elem in Safety) { if (elem != null) yield return new ElementValue("safety", elem); }
        foreach (var elem in ShelfLifeStorage) { if (elem != null) yield return new ElementValue("shelfLifeStorage", elem); }
        if (PhysicalCharacteristics != null) yield return new ElementValue("physicalCharacteristics", PhysicalCharacteristics);
        foreach (var elem in LanguageCode) { if (elem != null) yield return new ElementValue("languageCode", elem); }
        foreach (var elem in Capability) { if (elem != null) yield return new ElementValue("capability", elem); }
        foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
        if (Owner != null) yield return new ElementValue("owner", Owner);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (OnlineInformationElement != null) yield return new ElementValue("onlineInformation", OnlineInformationElement);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        if (ParentDevice != null) yield return new ElementValue("parentDevice", ParentDevice);
        foreach (var elem in Material) { if (elem != null) yield return new ElementValue("material", elem); }
      }
    }

  }

}

// end of file
