// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.1.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A citation of a publication
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Citation","http://hl7.org/fhir/StructureDefinition/Citation", IsResource=true)]
  public partial class Citation : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Citation"; } }

    /// <summary>
    /// Used for status.
    /// (url: http://hl7.org/fhir/ValueSet/medline-citation-status)
    /// (system: http://hl7.org/fhir/medline-citation-status)
    /// </summary>
    [FhirEnumeration("MedlineCitationStatus")]
    public enum MedlineCitationStatus
    {
      /// <summary>
      /// MedlineCitation record  completed (see https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html#status_value).
      /// (system: http://hl7.org/fhir/medline-citation-status)
      /// </summary>
      [EnumLiteral("Completed", "http://hl7.org/fhir/medline-citation-status"), Description("Completed")]
      Completed,
      /// <summary>
      /// MedlineCitation record reviewed at citation level (see https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html#status_value).
      /// (system: http://hl7.org/fhir/medline-citation-status)
      /// </summary>
      [EnumLiteral("In-Process", "http://hl7.org/fhir/medline-citation-status"), Description("In-Process")]
      InProcess,
      /// <summary>
      /// MedlineCitation record that is indexed without MeSH Headings (see https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html#status_value).
      /// (system: http://hl7.org/fhir/medline-citation-status)
      /// </summary>
      [EnumLiteral("PubMed-not-MEDLINE", "http://hl7.org/fhir/medline-citation-status"), Description("PubMed-not-MEDLINE")]
      PubMedNotMEDLINE,
      /// <summary>
      /// MedlineCitation record reviewed at journal issue level (see https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html#status_value).
      /// (system: http://hl7.org/fhir/medline-citation-status)
      /// </summary>
      [EnumLiteral("In-Data-Review", "http://hl7.org/fhir/medline-citation-status"), Description("In-Data-Review")]
      InDataReview,
      /// <summary>
      /// MedlineCitation record not indexed for MEDLINE (see https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html#status_value).
      /// (system: http://hl7.org/fhir/medline-citation-status)
      /// </summary>
      [EnumLiteral("Publisher", "http://hl7.org/fhir/medline-citation-status"), Description("Publisher")]
      Publisher,
      /// <summary>
      /// MedlineCitation record that is a true MEDLINE record (see https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html#status_value).
      /// (system: http://hl7.org/fhir/medline-citation-status)
      /// </summary>
      [EnumLiteral("MEDLINE", "http://hl7.org/fhir/medline-citation-status"), Description("MEDLINE")]
      MEDLINE,
      /// <summary>
      /// MedlineCitation record that is indexed with original (older) MeSH Headings (see https://www.nlm.nih.gov/bsd/licensee/elements_descriptions.html#status_value).
      /// (system: http://hl7.org/fhir/medline-citation-status)
      /// </summary>
      [EnumLiteral("OLDMEDLINE", "http://hl7.org/fhir/medline-citation-status"), Description("OLDMEDLINE")]
      OLDMEDLINE,
    }

    /// <summary>
    /// Used for owner.
    /// (url: http://hl7.org/fhir/ValueSet/medline-citation-owner)
    /// (system: http://hl7.org/fhir/medline-citation-owner)
    /// </summary>
    [FhirEnumeration("MedlineCitationOwner")]
    public enum MedlineCitationOwner
    {
      /// <summary>
      /// National Library of Medicine, Index Section.
      /// (system: http://hl7.org/fhir/medline-citation-owner)
      /// </summary>
      [EnumLiteral("NLM", "http://hl7.org/fhir/medline-citation-owner"), Description("NLM")]
      NLM,
      /// <summary>
      /// National Aeronautics and Space Administration.
      /// (system: http://hl7.org/fhir/medline-citation-owner)
      /// </summary>
      [EnumLiteral("NASA", "http://hl7.org/fhir/medline-citation-owner"), Description("NASA")]
      NASA,
      /// <summary>
      /// Population Information Program, Johns Hopkins School of Public Health.
      /// (system: http://hl7.org/fhir/medline-citation-owner)
      /// </summary>
      [EnumLiteral("PIP", "http://hl7.org/fhir/medline-citation-owner"), Description("PIP")]
      PIP,
      /// <summary>
      /// Kennedy Institute of Ethics, Georgetown University.
      /// (system: http://hl7.org/fhir/medline-citation-owner)
      /// </summary>
      [EnumLiteral("KIE", "http://hl7.org/fhir/medline-citation-owner"), Description("KIE")]
      KIE,
      /// <summary>
      /// National Information Center on Health Services Research and Health Care Technology, National Library of Medicine.
      /// (system: http://hl7.org/fhir/medline-citation-owner)
      /// </summary>
      [EnumLiteral("HSR", "http://hl7.org/fhir/medline-citation-owner"), Description("HSR")]
      HSR,
      /// <summary>
      /// History of Medicine Division, National Library of Medicine.
      /// (system: http://hl7.org/fhir/medline-citation-owner)
      /// </summary>
      [EnumLiteral("HMD", "http://hl7.org/fhir/medline-citation-owner"), Description("HMD")]
      HMD,
      /// <summary>
      /// Specialized Information Services Division, National Library of Medicine.
      /// (system: http://hl7.org/fhir/medline-citation-owner)
      /// </summary>
      [EnumLiteral("SIS", "http://hl7.org/fhir/medline-citation-owner"), Description("SIS")]
      SIS,
      /// <summary>
      /// Not used by National Library of Medicine; used by others to adapt the MEDLINE DTD for other applications.
      /// (system: http://hl7.org/fhir/medline-citation-owner)
      /// </summary>
      [EnumLiteral("NOTNLM", "http://hl7.org/fhir/medline-citation-owner"), Description("NOTNLM")]
      NOTNLM,
    }

    /// <summary>
    /// PubMed Publication Status.
    /// (url: http://hl7.org/fhir/ValueSet/pubmed-pubstatus)
    /// (system: http://hl7.org/fhir/pubmed-pubstatus)
    /// </summary>
    [FhirEnumeration("PubMedPubStatus")]
    public enum PubMedPubStatus
    {
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("received", "http://hl7.org/fhir/pubmed-pubstatus"), Description("received")]
      Received,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("accepted", "http://hl7.org/fhir/pubmed-pubstatus"), Description("accepted")]
      Accepted,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("epublish", "http://hl7.org/fhir/pubmed-pubstatus"), Description("epublish")]
      Epublish,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("ppublish", "http://hl7.org/fhir/pubmed-pubstatus"), Description("ppublish")]
      Ppublish,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("revised", "http://hl7.org/fhir/pubmed-pubstatus"), Description("revised")]
      Revised,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("aheadofprint", "http://hl7.org/fhir/pubmed-pubstatus"), Description("aheadofprint")]
      Aheadofprint,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("retracted", "http://hl7.org/fhir/pubmed-pubstatus"), Description("retracted")]
      Retracted,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("ecollection", "http://hl7.org/fhir/pubmed-pubstatus"), Description("ecollection")]
      Ecollection,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("pmc", "http://hl7.org/fhir/pubmed-pubstatus"), Description("pmc")]
      Pmc,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("pmcr", "http://hl7.org/fhir/pubmed-pubstatus"), Description("pmcr")]
      Pmcr,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("pubmed", "http://hl7.org/fhir/pubmed-pubstatus"), Description("pubmed")]
      Pubmed,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("pubmedr", "http://hl7.org/fhir/pubmed-pubstatus"), Description("pubmedr")]
      Pubmedr,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("premedline", "http://hl7.org/fhir/pubmed-pubstatus"), Description("premedline")]
      Premedline,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("medline", "http://hl7.org/fhir/pubmed-pubstatus"), Description("medline")]
      Medline,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("medliner", "http://hl7.org/fhir/pubmed-pubstatus"), Description("medliner")]
      Medliner,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("entrez", "http://hl7.org/fhir/pubmed-pubstatus"), Description("entrez")]
      Entrez,
      /// <summary>
      /// Used as the value of PublicationStatus or attribute of PubmedPubDate in MEDLINE DTD.
      /// (system: http://hl7.org/fhir/pubmed-pubstatus)
      /// </summary>
      [EnumLiteral("pmc-release", "http://hl7.org/fhir/pubmed-pubstatus"), Description("pmc-release")]
      PmcRelease,
    }

    /// <summary>
    /// A human-readable display of the citation
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#Summary", IsNestedType=true)]
    public partial class SummaryComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#Summary"; } }

      /// <summary>
      /// Format for display of the citation
      /// </summary>
      [FhirElement("style", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Style
      {
        get { return _Style; }
        set { _Style = value; OnPropertyChanged("Style"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Style;

      /// <summary>
      /// The human-readable display of the citation
      /// </summary>
      [FhirElement("text", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown Text
      {
        get { return _Text; }
        set { _Text = value; OnPropertyChanged("Text"); }
      }

      private Hl7.Fhir.Model.Markdown _Text;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SummaryComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Style != null) dest.Style = (Hl7.Fhir.Model.CodeableConcept)Style.DeepCopy();
        if(Text != null) dest.Text = (Hl7.Fhir.Model.Markdown)Text.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SummaryComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SummaryComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Style, otherT.Style)) return false;
        if( !DeepComparable.Matches(Text, otherT.Text)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SummaryComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Style, otherT.Style)) return false;
        if( !DeepComparable.IsExactly(Text, otherT.Text)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Style != null) yield return Style;
          if (Text != null) yield return Text;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Style != null) yield return new ElementValue("style", Style);
          if (Text != null) yield return new ElementValue("text", Text);
        }
      }

    }

    /// <summary>
    /// An alternative variant of the citation
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#VariantCitation", IsNestedType=true)]
    public partial class VariantCitationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#VariantCitation"; } }

      /// <summary>
      /// Used to describe the reason for the variant citation, such as version or subpart specification
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Used to describe the specific variation, such as version number or subpart specification
      /// </summary>
      [FhirElement("value", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// Used to describe the specific variation, such as version number or subpart specification
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      /// <summary>
      /// Base citation layer
      /// </summary>
      [FhirElement("baseCitation", Order=60)]
      [CLSCompliant(false)]
      [References("Citation")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference BaseCitation
      {
        get { return _BaseCitation; }
        set { _BaseCitation = value; OnPropertyChanged("BaseCitation"); }
      }

      private Hl7.Fhir.Model.ResourceReference _BaseCitation;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VariantCitationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        if(BaseCitation != null) dest.BaseCitation = (Hl7.Fhir.Model.ResourceReference)BaseCitation.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VariantCitationComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VariantCitationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;
        if( !DeepComparable.Matches(BaseCitation, otherT.BaseCitation)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VariantCitationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;
        if( !DeepComparable.IsExactly(BaseCitation, otherT.BaseCitation)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (ValueElement != null) yield return ValueElement;
          if (BaseCitation != null) yield return BaseCitation;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
          if (BaseCitation != null) yield return new ElementValue("baseCitation", BaseCitation);
        }
      }

    }

    /// <summary>
    /// The name of the article
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#ArticleTitle", IsNestedType=true)]
    public partial class ArticleTitleComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#ArticleTitle"; } }

      /// <summary>
      /// Used to express the reason and specific aspect for any variant title, such as language
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Used to express the specific language
      /// </summary>
      [FhirElement("language", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Language
      {
        get { return _Language; }
        set { _Language = value; OnPropertyChanged("Language"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Language;

      /// <summary>
      /// Full title of the article
      /// </summary>
      [FhirElement("text", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown Text
      {
        get { return _Text; }
        set { _Text = value; OnPropertyChanged("Text"); }
      }

      private Hl7.Fhir.Model.Markdown _Text;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ArticleTitleComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Language != null) dest.Language = (Hl7.Fhir.Model.CodeableConcept)Language.DeepCopy();
        if(Text != null) dest.Text = (Hl7.Fhir.Model.Markdown)Text.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ArticleTitleComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ArticleTitleComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Language, otherT.Language)) return false;
        if( !DeepComparable.Matches(Text, otherT.Text)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ArticleTitleComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Language, otherT.Language)) return false;
        if( !DeepComparable.IsExactly(Text, otherT.Text)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Language != null) yield return Language;
          if (Text != null) yield return Text;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Language != null) yield return new ElementValue("language", Language);
          if (Text != null) yield return new ElementValue("text", Text);
        }
      }

    }

    /// <summary>
    /// Used for any URL for the article cited
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#WebLocation", IsNestedType=true)]
    public partial class WebLocationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#WebLocation"; } }

      /// <summary>
      /// Code the reason for different URLs, e.g. abstract and full-text
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The specific URL
      /// </summary>
      [FhirElement("url", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UrlElement
      {
        get { return _UrlElement; }
        set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UrlElement;

      /// <summary>
      /// The specific URL
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Url
      {
        get { return UrlElement != null ? UrlElement.Value : null; }
        set
        {
          if (value == null)
            UrlElement = null;
          else
            UrlElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Url");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as WebLocationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new WebLocationComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as WebLocationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as WebLocationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (UrlElement != null) yield return UrlElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        }
      }

    }

    /// <summary>
    /// Publisher-provided summary of the article
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#Abstract", IsNestedType=true)]
    public partial class AbstractComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#Abstract"; } }

      /// <summary>
      /// Used to express the reason for an additional or variant abstract, such as language
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Used to express the specific language
      /// </summary>
      [FhirElement("language", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Language
      {
        get { return _Language; }
        set { _Language = value; OnPropertyChanged("Language"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Language;

      /// <summary>
      /// Abstract content
      /// </summary>
      [FhirElement("text", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown Text
      {
        get { return _Text; }
        set { _Text = value; OnPropertyChanged("Text"); }
      }

      private Hl7.Fhir.Model.Markdown _Text;

      /// <summary>
      /// Copyright notice for the abstract
      /// </summary>
      [FhirElement("copyright", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown Copyright
      {
        get { return _Copyright; }
        set { _Copyright = value; OnPropertyChanged("Copyright"); }
      }

      private Hl7.Fhir.Model.Markdown _Copyright;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AbstractComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Language != null) dest.Language = (Hl7.Fhir.Model.CodeableConcept)Language.DeepCopy();
        if(Text != null) dest.Text = (Hl7.Fhir.Model.Markdown)Text.DeepCopy();
        if(Copyright != null) dest.Copyright = (Hl7.Fhir.Model.Markdown)Copyright.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AbstractComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AbstractComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Language, otherT.Language)) return false;
        if( !DeepComparable.Matches(Text, otherT.Text)) return false;
        if( !DeepComparable.Matches(Copyright, otherT.Copyright)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AbstractComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Language, otherT.Language)) return false;
        if( !DeepComparable.IsExactly(Text, otherT.Text)) return false;
        if( !DeepComparable.IsExactly(Copyright, otherT.Copyright)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Language != null) yield return Language;
          if (Text != null) yield return Text;
          if (Copyright != null) yield return Copyright;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Language != null) yield return new ElementValue("language", Language);
          if (Text != null) yield return new ElementValue("text", Text);
          if (Copyright != null) yield return new ElementValue("copyright", Copyright);
        }
      }

    }

    /// <summary>
    /// Attribution of authors and other contributors
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#Contributorship", IsNestedType=true)]
    public partial class ContributorshipComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#Contributorship"; } }

      /// <summary>
      /// Indicates if the list includes all authors and/or contributors
      /// </summary>
      [FhirElement("complete", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean CompleteElement
      {
        get { return _CompleteElement; }
        set { _CompleteElement = value; OnPropertyChanged("CompleteElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _CompleteElement;

      /// <summary>
      /// Indicates if the list includes all authors and/or contributors
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Complete
      {
        get { return CompleteElement != null ? CompleteElement.Value : null; }
        set
        {
          if (value == null)
            CompleteElement = null;
          else
            CompleteElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Complete");
        }
      }

      /// <summary>
      /// An individual entity named in the list
      /// </summary>
      [FhirElement("entry", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Citation.ContributorshipEntryComponent> Entry
      {
        get { if(_Entry==null) _Entry = new List<Hl7.Fhir.Model.Citation.ContributorshipEntryComponent>(); return _Entry; }
        set { _Entry = value; OnPropertyChanged("Entry"); }
      }

      private List<Hl7.Fhir.Model.Citation.ContributorshipEntryComponent> _Entry;

      /// <summary>
      /// Used to record a display of the author/contributor list without separate coding for each list member
      /// </summary>
      [FhirElement("summary", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Citation.ContributorshipSummaryComponent> Summary
      {
        get { if(_Summary==null) _Summary = new List<Hl7.Fhir.Model.Citation.ContributorshipSummaryComponent>(); return _Summary; }
        set { _Summary = value; OnPropertyChanged("Summary"); }
      }

      private List<Hl7.Fhir.Model.Citation.ContributorshipSummaryComponent> _Summary;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContributorshipComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CompleteElement != null) dest.CompleteElement = (Hl7.Fhir.Model.FhirBoolean)CompleteElement.DeepCopy();
        if(Entry != null) dest.Entry = new List<Hl7.Fhir.Model.Citation.ContributorshipEntryComponent>(Entry.DeepCopy());
        if(Summary != null) dest.Summary = new List<Hl7.Fhir.Model.Citation.ContributorshipSummaryComponent>(Summary.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContributorshipComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContributorshipComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CompleteElement, otherT.CompleteElement)) return false;
        if( !DeepComparable.Matches(Entry, otherT.Entry)) return false;
        if( !DeepComparable.Matches(Summary, otherT.Summary)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContributorshipComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CompleteElement, otherT.CompleteElement)) return false;
        if( !DeepComparable.IsExactly(Entry, otherT.Entry)) return false;
        if( !DeepComparable.IsExactly(Summary, otherT.Summary)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CompleteElement != null) yield return CompleteElement;
          foreach (var elem in Entry) { if (elem != null) yield return elem; }
          foreach (var elem in Summary) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CompleteElement != null) yield return new ElementValue("complete", CompleteElement);
          foreach (var elem in Entry) { if (elem != null) yield return new ElementValue("entry", elem); }
          foreach (var elem in Summary) { if (elem != null) yield return new ElementValue("summary", elem); }
        }
      }

    }

    /// <summary>
    /// An individual entity named in the list
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#ContributorshipEntry", IsNestedType=true)]
    public partial class ContributorshipEntryComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#ContributorshipEntry"; } }

      /// <summary>
      /// A name associated with the person
      /// </summary>
      [FhirElement("name", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.HumanName Name
      {
        get { return _Name; }
        set { _Name = value; OnPropertyChanged("Name"); }
      }

      private Hl7.Fhir.Model.HumanName _Name;

      /// <summary>
      /// Initials for forename
      /// </summary>
      [FhirElement("initials", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString InitialsElement
      {
        get { return _InitialsElement; }
        set { _InitialsElement = value; OnPropertyChanged("InitialsElement"); }
      }

      private Hl7.Fhir.Model.FhirString _InitialsElement;

      /// <summary>
      /// Initials for forename
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Initials
      {
        get { return InitialsElement != null ? InitialsElement.Value : null; }
        set
        {
          if (value == null)
            InitialsElement = null;
          else
            InitialsElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Initials");
        }
      }

      /// <summary>
      /// Used for collective or corporate name as an author
      /// </summary>
      [FhirElement("collectiveName", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CollectiveNameElement
      {
        get { return _CollectiveNameElement; }
        set { _CollectiveNameElement = value; OnPropertyChanged("CollectiveNameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CollectiveNameElement;

      /// <summary>
      /// Used for collective or corporate name as an author
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string CollectiveName
      {
        get { return CollectiveNameElement != null ? CollectiveNameElement.Value : null; }
        set
        {
          if (value == null)
            CollectiveNameElement = null;
          else
            CollectiveNameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("CollectiveName");
        }
      }

      /// <summary>
      /// Author identifier, eg ORCID
      /// </summary>
      [FhirElement("identifier", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> Identifier
      {
        get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _Identifier;

      /// <summary>
      /// Organizational affiliation
      /// </summary>
      [FhirElement("affiliationInfo", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Citation.ContributorshipEntryAffiliationInfoComponent> AffiliationInfo
      {
        get { if(_AffiliationInfo==null) _AffiliationInfo = new List<Hl7.Fhir.Model.Citation.ContributorshipEntryAffiliationInfoComponent>(); return _AffiliationInfo; }
        set { _AffiliationInfo = value; OnPropertyChanged("AffiliationInfo"); }
      }

      private List<Hl7.Fhir.Model.Citation.ContributorshipEntryAffiliationInfoComponent> _AffiliationInfo;

      /// <summary>
      /// Physical mailing address
      /// </summary>
      [FhirElement("address", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Address> Address
      {
        get { if(_Address==null) _Address = new List<Hl7.Fhir.Model.Address>(); return _Address; }
        set { _Address = value; OnPropertyChanged("Address"); }
      }

      private List<Hl7.Fhir.Model.Address> _Address;

      /// <summary>
      /// Email or telephone contact methods for
      /// </summary>
      [FhirElement("telecom", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ContactPoint> Telecom
      {
        get { if(_Telecom==null) _Telecom = new List<Hl7.Fhir.Model.ContactPoint>(); return _Telecom; }
        set { _Telecom = value; OnPropertyChanged("Telecom"); }
      }

      private List<Hl7.Fhir.Model.ContactPoint> _Telecom;

      /// <summary>
      /// The specific contributions
      /// </summary>
      [FhirElement("contribution", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Contribution
      {
        get { if(_Contribution==null) _Contribution = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Contribution; }
        set { _Contribution = value; OnPropertyChanged("Contribution"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Contribution;

      /// <summary>
      /// Used to identify non-author contributors
      /// </summary>
      [FhirElement("notAnAuthor", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean NotAnAuthorElement
      {
        get { return _NotAnAuthorElement; }
        set { _NotAnAuthorElement = value; OnPropertyChanged("NotAnAuthorElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _NotAnAuthorElement;

      /// <summary>
      /// Used to identify non-author contributors
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? NotAnAuthor
      {
        get { return NotAnAuthorElement != null ? NotAnAuthorElement.Value : null; }
        set
        {
          if (value == null)
            NotAnAuthorElement = null;
          else
            NotAnAuthorElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("NotAnAuthor");
        }
      }

      /// <summary>
      /// Indication of which author is the corresponding author for the article cited
      /// </summary>
      [FhirElement("correspondingAuthor", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean CorrespondingAuthorElement
      {
        get { return _CorrespondingAuthorElement; }
        set { _CorrespondingAuthorElement = value; OnPropertyChanged("CorrespondingAuthorElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _CorrespondingAuthorElement;

      /// <summary>
      /// Indication of which author is the corresponding author for the article cited
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? CorrespondingAuthor
      {
        get { return CorrespondingAuthorElement != null ? CorrespondingAuthorElement.Value : null; }
        set
        {
          if (value == null)
            CorrespondingAuthorElement = null;
          else
            CorrespondingAuthorElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("CorrespondingAuthor");
        }
      }

      /// <summary>
      /// Used to code order of authors
      /// </summary>
      [FhirElement("listOrder", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt ListOrderElement
      {
        get { return _ListOrderElement; }
        set { _ListOrderElement = value; OnPropertyChanged("ListOrderElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _ListOrderElement;

      /// <summary>
      /// Used to code order of authors
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? ListOrder
      {
        get { return ListOrderElement != null ? ListOrderElement.Value : null; }
        set
        {
          if (value == null)
            ListOrderElement = null;
          else
            ListOrderElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("ListOrder");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContributorshipEntryComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Name != null) dest.Name = (Hl7.Fhir.Model.HumanName)Name.DeepCopy();
        if(InitialsElement != null) dest.InitialsElement = (Hl7.Fhir.Model.FhirString)InitialsElement.DeepCopy();
        if(CollectiveNameElement != null) dest.CollectiveNameElement = (Hl7.Fhir.Model.FhirString)CollectiveNameElement.DeepCopy();
        if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
        if(AffiliationInfo != null) dest.AffiliationInfo = new List<Hl7.Fhir.Model.Citation.ContributorshipEntryAffiliationInfoComponent>(AffiliationInfo.DeepCopy());
        if(Address != null) dest.Address = new List<Hl7.Fhir.Model.Address>(Address.DeepCopy());
        if(Telecom != null) dest.Telecom = new List<Hl7.Fhir.Model.ContactPoint>(Telecom.DeepCopy());
        if(Contribution != null) dest.Contribution = new List<Hl7.Fhir.Model.CodeableConcept>(Contribution.DeepCopy());
        if(NotAnAuthorElement != null) dest.NotAnAuthorElement = (Hl7.Fhir.Model.FhirBoolean)NotAnAuthorElement.DeepCopy();
        if(CorrespondingAuthorElement != null) dest.CorrespondingAuthorElement = (Hl7.Fhir.Model.FhirBoolean)CorrespondingAuthorElement.DeepCopy();
        if(ListOrderElement != null) dest.ListOrderElement = (Hl7.Fhir.Model.PositiveInt)ListOrderElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContributorshipEntryComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContributorshipEntryComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Name, otherT.Name)) return false;
        if( !DeepComparable.Matches(InitialsElement, otherT.InitialsElement)) return false;
        if( !DeepComparable.Matches(CollectiveNameElement, otherT.CollectiveNameElement)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(AffiliationInfo, otherT.AffiliationInfo)) return false;
        if( !DeepComparable.Matches(Address, otherT.Address)) return false;
        if( !DeepComparable.Matches(Telecom, otherT.Telecom)) return false;
        if( !DeepComparable.Matches(Contribution, otherT.Contribution)) return false;
        if( !DeepComparable.Matches(NotAnAuthorElement, otherT.NotAnAuthorElement)) return false;
        if( !DeepComparable.Matches(CorrespondingAuthorElement, otherT.CorrespondingAuthorElement)) return false;
        if( !DeepComparable.Matches(ListOrderElement, otherT.ListOrderElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContributorshipEntryComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Name, otherT.Name)) return false;
        if( !DeepComparable.IsExactly(InitialsElement, otherT.InitialsElement)) return false;
        if( !DeepComparable.IsExactly(CollectiveNameElement, otherT.CollectiveNameElement)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(AffiliationInfo, otherT.AffiliationInfo)) return false;
        if( !DeepComparable.IsExactly(Address, otherT.Address)) return false;
        if( !DeepComparable.IsExactly(Telecom, otherT.Telecom)) return false;
        if( !DeepComparable.IsExactly(Contribution, otherT.Contribution)) return false;
        if( !DeepComparable.IsExactly(NotAnAuthorElement, otherT.NotAnAuthorElement)) return false;
        if( !DeepComparable.IsExactly(CorrespondingAuthorElement, otherT.CorrespondingAuthorElement)) return false;
        if( !DeepComparable.IsExactly(ListOrderElement, otherT.ListOrderElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Name != null) yield return Name;
          if (InitialsElement != null) yield return InitialsElement;
          if (CollectiveNameElement != null) yield return CollectiveNameElement;
          foreach (var elem in Identifier) { if (elem != null) yield return elem; }
          foreach (var elem in AffiliationInfo) { if (elem != null) yield return elem; }
          foreach (var elem in Address) { if (elem != null) yield return elem; }
          foreach (var elem in Telecom) { if (elem != null) yield return elem; }
          foreach (var elem in Contribution) { if (elem != null) yield return elem; }
          if (NotAnAuthorElement != null) yield return NotAnAuthorElement;
          if (CorrespondingAuthorElement != null) yield return CorrespondingAuthorElement;
          if (ListOrderElement != null) yield return ListOrderElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Name != null) yield return new ElementValue("name", Name);
          if (InitialsElement != null) yield return new ElementValue("initials", InitialsElement);
          if (CollectiveNameElement != null) yield return new ElementValue("collectiveName", CollectiveNameElement);
          foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
          foreach (var elem in AffiliationInfo) { if (elem != null) yield return new ElementValue("affiliationInfo", elem); }
          foreach (var elem in Address) { if (elem != null) yield return new ElementValue("address", elem); }
          foreach (var elem in Telecom) { if (elem != null) yield return new ElementValue("telecom", elem); }
          foreach (var elem in Contribution) { if (elem != null) yield return new ElementValue("contribution", elem); }
          if (NotAnAuthorElement != null) yield return new ElementValue("notAnAuthor", NotAnAuthorElement);
          if (CorrespondingAuthorElement != null) yield return new ElementValue("correspondingAuthor", CorrespondingAuthorElement);
          if (ListOrderElement != null) yield return new ElementValue("listOrder", ListOrderElement);
        }
      }

    }

    /// <summary>
    /// Organizational affiliation
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#ContributorshipEntryAffiliationInfo", IsNestedType=true)]
    public partial class ContributorshipEntryAffiliationInfoComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#ContributorshipEntryAffiliationInfo"; } }

      /// <summary>
      /// Display for the organization
      /// </summary>
      [FhirElement("affiliation", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString AffiliationElement
      {
        get { return _AffiliationElement; }
        set { _AffiliationElement = value; OnPropertyChanged("AffiliationElement"); }
      }

      private Hl7.Fhir.Model.FhirString _AffiliationElement;

      /// <summary>
      /// Display for the organization
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Affiliation
      {
        get { return AffiliationElement != null ? AffiliationElement.Value : null; }
        set
        {
          if (value == null)
            AffiliationElement = null;
          else
            AffiliationElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Affiliation");
        }
      }

      /// <summary>
      /// Role within the organization, such as professional title
      /// </summary>
      [FhirElement("role", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RoleElement
      {
        get { return _RoleElement; }
        set { _RoleElement = value; OnPropertyChanged("RoleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RoleElement;

      /// <summary>
      /// Role within the organization, such as professional title
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Role
      {
        get { return RoleElement != null ? RoleElement.Value : null; }
        set
        {
          if (value == null)
            RoleElement = null;
          else
            RoleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Role");
        }
      }

      /// <summary>
      /// Identifier for the organization
      /// </summary>
      [FhirElement("identifier", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> Identifier
      {
        get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _Identifier;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContributorshipEntryAffiliationInfoComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(AffiliationElement != null) dest.AffiliationElement = (Hl7.Fhir.Model.FhirString)AffiliationElement.DeepCopy();
        if(RoleElement != null) dest.RoleElement = (Hl7.Fhir.Model.FhirString)RoleElement.DeepCopy();
        if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContributorshipEntryAffiliationInfoComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContributorshipEntryAffiliationInfoComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(AffiliationElement, otherT.AffiliationElement)) return false;
        if( !DeepComparable.Matches(RoleElement, otherT.RoleElement)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContributorshipEntryAffiliationInfoComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(AffiliationElement, otherT.AffiliationElement)) return false;
        if( !DeepComparable.IsExactly(RoleElement, otherT.RoleElement)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (AffiliationElement != null) yield return AffiliationElement;
          if (RoleElement != null) yield return RoleElement;
          foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (AffiliationElement != null) yield return new ElementValue("affiliation", AffiliationElement);
          if (RoleElement != null) yield return new ElementValue("role", RoleElement);
          foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        }
      }

    }

    /// <summary>
    /// Used to record a display of the author/contributor list without separate coding for each list member
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#ContributorshipSummary", IsNestedType=true)]
    public partial class ContributorshipSummaryComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#ContributorshipSummary"; } }

      /// <summary>
      /// Either authorList or contributorshipStatement
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The format for the display string
      /// </summary>
      [FhirElement("style", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Style
      {
        get { return _Style; }
        set { _Style = value; OnPropertyChanged("Style"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Style;

      /// <summary>
      /// Used to code the producer or rule for creating the display string
      /// </summary>
      [FhirElement("source", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Source
      {
        get { return _Source; }
        set { _Source = value; OnPropertyChanged("Source"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Source;

      /// <summary>
      /// The display string for the author list, contributor list, or contributorship statement
      /// </summary>
      [FhirElement("value", Order=70)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.Markdown _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContributorshipSummaryComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Style != null) dest.Style = (Hl7.Fhir.Model.CodeableConcept)Style.DeepCopy();
        if(Source != null) dest.Source = (Hl7.Fhir.Model.CodeableConcept)Source.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.Markdown)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContributorshipSummaryComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContributorshipSummaryComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Style, otherT.Style)) return false;
        if( !DeepComparable.Matches(Source, otherT.Source)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContributorshipSummaryComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Style, otherT.Style)) return false;
        if( !DeepComparable.IsExactly(Source, otherT.Source)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Style != null) yield return Style;
          if (Source != null) yield return Source;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Style != null) yield return new ElementValue("style", Style);
          if (Source != null) yield return new ElementValue("source", Source);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

    }

    /// <summary>
    /// If multiple, used to represent alternative forms of the article that are not separate citations
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#PublicationForm", IsNestedType=true)]
    public partial class PublicationFormComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#PublicationForm"; } }

      /// <summary>
      /// Identify the medium/media in which the cited article is published, eg print, electronic or print-electronic
      /// </summary>
      [FhirElement("publishingModel", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept PublishingModel
      {
        get { return _PublishingModel; }
        set { _PublishingModel = value; OnPropertyChanged("PublishingModel"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _PublishingModel;

      /// <summary>
      /// The collection the cited article is published in
      /// </summary>
      [FhirElement("publishedIn", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Citation.PublicationFormPublishedInComponent PublishedIn
      {
        get { return _PublishedIn; }
        set { _PublishedIn = value; OnPropertyChanged("PublishedIn"); }
      }

      private Hl7.Fhir.Model.Citation.PublicationFormPublishedInComponent _PublishedIn;

      /// <summary>
      /// The specific issue in which the cited article resides
      /// </summary>
      [FhirElement("periodicRelease", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Citation.PublicationFormPeriodicReleaseComponent> PeriodicRelease
      {
        get { if(_PeriodicRelease==null) _PeriodicRelease = new List<Hl7.Fhir.Model.Citation.PublicationFormPeriodicReleaseComponent>(); return _PeriodicRelease; }
        set { _PeriodicRelease = value; OnPropertyChanged("PeriodicRelease"); }
      }

      private List<Hl7.Fhir.Model.Citation.PublicationFormPeriodicReleaseComponent> _PeriodicRelease;

      /// <summary>
      /// The date the article was added to the database, or the date the article was released
      /// </summary>
      [FhirElement("articleDate", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime ArticleDateElement
      {
        get { return _ArticleDateElement; }
        set { _ArticleDateElement = value; OnPropertyChanged("ArticleDateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _ArticleDateElement;

      /// <summary>
      /// The date the article was added to the database, or the date the article was released
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ArticleDate
      {
        get { return ArticleDateElement != null ? ArticleDateElement.Value : null; }
        set
        {
          if (value == null)
            ArticleDateElement = null;
          else
            ArticleDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("ArticleDate");
        }
      }

      /// <summary>
      /// The date the article was last revised or updated in the database
      /// </summary>
      [FhirElement("revisionDate", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime RevisionDateElement
      {
        get { return _RevisionDateElement; }
        set { _RevisionDateElement = value; OnPropertyChanged("RevisionDateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _RevisionDateElement;

      /// <summary>
      /// The date the article was last revised or updated in the database
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RevisionDate
      {
        get { return RevisionDateElement != null ? RevisionDateElement.Value : null; }
        set
        {
          if (value == null)
            RevisionDateElement = null;
          else
            RevisionDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("RevisionDate");
        }
      }

      /// <summary>
      /// Language in which this form of the article is published
      /// </summary>
      [FhirElement("language", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Language
      {
        get { if(_Language==null) _Language = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Language; }
        set { _Language = value; OnPropertyChanged("Language"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Language;

      /// <summary>
      /// Used for full display of pagination
      /// </summary>
      [FhirElement("pageString", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PageStringElement
      {
        get { return _PageStringElement; }
        set { _PageStringElement = value; OnPropertyChanged("PageStringElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PageStringElement;

      /// <summary>
      /// Used for full display of pagination
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string PageString
      {
        get { return PageStringElement != null ? PageStringElement.Value : null; }
        set
        {
          if (value == null)
            PageStringElement = null;
          else
            PageStringElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("PageString");
        }
      }

      /// <summary>
      /// Used for isolated representation of first page
      /// </summary>
      [FhirElement("firstPage", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString FirstPageElement
      {
        get { return _FirstPageElement; }
        set { _FirstPageElement = value; OnPropertyChanged("FirstPageElement"); }
      }

      private Hl7.Fhir.Model.FhirString _FirstPageElement;

      /// <summary>
      /// Used for isolated representation of first page
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string FirstPage
      {
        get { return FirstPageElement != null ? FirstPageElement.Value : null; }
        set
        {
          if (value == null)
            FirstPageElement = null;
          else
            FirstPageElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("FirstPage");
        }
      }

      /// <summary>
      /// Used for isolated representation of last page
      /// </summary>
      [FhirElement("lastPage", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LastPageElement
      {
        get { return _LastPageElement; }
        set { _LastPageElement = value; OnPropertyChanged("LastPageElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LastPageElement;

      /// <summary>
      /// Used for isolated representation of last page
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LastPage
      {
        get { return LastPageElement != null ? LastPageElement.Value : null; }
        set
        {
          if (value == null)
            LastPageElement = null;
          else
            LastPageElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("LastPage");
        }
      }

      /// <summary>
      /// Number of pages or screens
      /// </summary>
      [FhirElement("pageCount", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PageCountElement
      {
        get { return _PageCountElement; }
        set { _PageCountElement = value; OnPropertyChanged("PageCountElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PageCountElement;

      /// <summary>
      /// Number of pages or screens
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string PageCount
      {
        get { return PageCountElement != null ? PageCountElement.Value : null; }
        set
        {
          if (value == null)
            PageCountElement = null;
          else
            PageCountElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("PageCount");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PublicationFormComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(PublishingModel != null) dest.PublishingModel = (Hl7.Fhir.Model.CodeableConcept)PublishingModel.DeepCopy();
        if(PublishedIn != null) dest.PublishedIn = (Hl7.Fhir.Model.Citation.PublicationFormPublishedInComponent)PublishedIn.DeepCopy();
        if(PeriodicRelease != null) dest.PeriodicRelease = new List<Hl7.Fhir.Model.Citation.PublicationFormPeriodicReleaseComponent>(PeriodicRelease.DeepCopy());
        if(ArticleDateElement != null) dest.ArticleDateElement = (Hl7.Fhir.Model.FhirDateTime)ArticleDateElement.DeepCopy();
        if(RevisionDateElement != null) dest.RevisionDateElement = (Hl7.Fhir.Model.FhirDateTime)RevisionDateElement.DeepCopy();
        if(Language != null) dest.Language = new List<Hl7.Fhir.Model.CodeableConcept>(Language.DeepCopy());
        if(PageStringElement != null) dest.PageStringElement = (Hl7.Fhir.Model.FhirString)PageStringElement.DeepCopy();
        if(FirstPageElement != null) dest.FirstPageElement = (Hl7.Fhir.Model.FhirString)FirstPageElement.DeepCopy();
        if(LastPageElement != null) dest.LastPageElement = (Hl7.Fhir.Model.FhirString)LastPageElement.DeepCopy();
        if(PageCountElement != null) dest.PageCountElement = (Hl7.Fhir.Model.FhirString)PageCountElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PublicationFormComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PublicationFormComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(PublishingModel, otherT.PublishingModel)) return false;
        if( !DeepComparable.Matches(PublishedIn, otherT.PublishedIn)) return false;
        if( !DeepComparable.Matches(PeriodicRelease, otherT.PeriodicRelease)) return false;
        if( !DeepComparable.Matches(ArticleDateElement, otherT.ArticleDateElement)) return false;
        if( !DeepComparable.Matches(RevisionDateElement, otherT.RevisionDateElement)) return false;
        if( !DeepComparable.Matches(Language, otherT.Language)) return false;
        if( !DeepComparable.Matches(PageStringElement, otherT.PageStringElement)) return false;
        if( !DeepComparable.Matches(FirstPageElement, otherT.FirstPageElement)) return false;
        if( !DeepComparable.Matches(LastPageElement, otherT.LastPageElement)) return false;
        if( !DeepComparable.Matches(PageCountElement, otherT.PageCountElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PublicationFormComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(PublishingModel, otherT.PublishingModel)) return false;
        if( !DeepComparable.IsExactly(PublishedIn, otherT.PublishedIn)) return false;
        if( !DeepComparable.IsExactly(PeriodicRelease, otherT.PeriodicRelease)) return false;
        if( !DeepComparable.IsExactly(ArticleDateElement, otherT.ArticleDateElement)) return false;
        if( !DeepComparable.IsExactly(RevisionDateElement, otherT.RevisionDateElement)) return false;
        if( !DeepComparable.IsExactly(Language, otherT.Language)) return false;
        if( !DeepComparable.IsExactly(PageStringElement, otherT.PageStringElement)) return false;
        if( !DeepComparable.IsExactly(FirstPageElement, otherT.FirstPageElement)) return false;
        if( !DeepComparable.IsExactly(LastPageElement, otherT.LastPageElement)) return false;
        if( !DeepComparable.IsExactly(PageCountElement, otherT.PageCountElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (PublishingModel != null) yield return PublishingModel;
          if (PublishedIn != null) yield return PublishedIn;
          foreach (var elem in PeriodicRelease) { if (elem != null) yield return elem; }
          if (ArticleDateElement != null) yield return ArticleDateElement;
          if (RevisionDateElement != null) yield return RevisionDateElement;
          foreach (var elem in Language) { if (elem != null) yield return elem; }
          if (PageStringElement != null) yield return PageStringElement;
          if (FirstPageElement != null) yield return FirstPageElement;
          if (LastPageElement != null) yield return LastPageElement;
          if (PageCountElement != null) yield return PageCountElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (PublishingModel != null) yield return new ElementValue("publishingModel", PublishingModel);
          if (PublishedIn != null) yield return new ElementValue("publishedIn", PublishedIn);
          foreach (var elem in PeriodicRelease) { if (elem != null) yield return new ElementValue("periodicRelease", elem); }
          if (ArticleDateElement != null) yield return new ElementValue("articleDate", ArticleDateElement);
          if (RevisionDateElement != null) yield return new ElementValue("revisionDate", RevisionDateElement);
          foreach (var elem in Language) { if (elem != null) yield return new ElementValue("language", elem); }
          if (PageStringElement != null) yield return new ElementValue("pageString", PageStringElement);
          if (FirstPageElement != null) yield return new ElementValue("firstPage", FirstPageElement);
          if (LastPageElement != null) yield return new ElementValue("lastPage", LastPageElement);
          if (PageCountElement != null) yield return new ElementValue("pageCount", PageCountElement);
        }
      }

    }

    /// <summary>
    /// The collection the cited article is published in
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#PublicationFormPublishedIn", IsNestedType=true)]
    public partial class PublicationFormPublishedInComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#PublicationFormPublishedIn"; } }

      /// <summary>
      /// Periodical, database, or book
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN
      /// </summary>
      [FhirElement("identifier", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> Identifier
      {
        get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _Identifier;

      /// <summary>
      /// Name of the database or title of the book or journal
      /// </summary>
      [FhirElement("title", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// Name of the database or title of the book or journal
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Name of the publisher
      /// </summary>
      [FhirElement("publisher", Order=70)]
      [CLSCompliant(false)]
      [References("Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Publisher
      {
        get { return _Publisher; }
        set { _Publisher = value; OnPropertyChanged("Publisher"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Publisher;

      /// <summary>
      /// Geographic location of the publisher
      /// </summary>
      [FhirElement("publisherLocation", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PublisherLocationElement
      {
        get { return _PublisherLocationElement; }
        set { _PublisherLocationElement = value; OnPropertyChanged("PublisherLocationElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PublisherLocationElement;

      /// <summary>
      /// Geographic location of the publisher
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string PublisherLocation
      {
        get { return PublisherLocationElement != null ? PublisherLocationElement.Value : null; }
        set
        {
          if (value == null)
            PublisherLocationElement = null;
          else
            PublisherLocationElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("PublisherLocation");
        }
      }

      /// <summary>
      /// When the database was first available or when the book was published
      /// </summary>
      [FhirElement("startDate", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Date StartDateElement
      {
        get { return _StartDateElement; }
        set { _StartDateElement = value; OnPropertyChanged("StartDateElement"); }
      }

      private Hl7.Fhir.Model.Date _StartDateElement;

      /// <summary>
      /// When the database was first available or when the book was published
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string StartDate
      {
        get { return StartDateElement != null ? StartDateElement.Value : null; }
        set
        {
          if (value == null)
            StartDateElement = null;
          else
            StartDateElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("StartDate");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PublicationFormPublishedInComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(Publisher != null) dest.Publisher = (Hl7.Fhir.Model.ResourceReference)Publisher.DeepCopy();
        if(PublisherLocationElement != null) dest.PublisherLocationElement = (Hl7.Fhir.Model.FhirString)PublisherLocationElement.DeepCopy();
        if(StartDateElement != null) dest.StartDateElement = (Hl7.Fhir.Model.Date)StartDateElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PublicationFormPublishedInComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PublicationFormPublishedInComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(Publisher, otherT.Publisher)) return false;
        if( !DeepComparable.Matches(PublisherLocationElement, otherT.PublisherLocationElement)) return false;
        if( !DeepComparable.Matches(StartDateElement, otherT.StartDateElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PublicationFormPublishedInComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(Publisher, otherT.Publisher)) return false;
        if( !DeepComparable.IsExactly(PublisherLocationElement, otherT.PublisherLocationElement)) return false;
        if( !DeepComparable.IsExactly(StartDateElement, otherT.StartDateElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Identifier) { if (elem != null) yield return elem; }
          if (TitleElement != null) yield return TitleElement;
          if (Publisher != null) yield return Publisher;
          if (PublisherLocationElement != null) yield return PublisherLocationElement;
          if (StartDateElement != null) yield return StartDateElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (Publisher != null) yield return new ElementValue("publisher", Publisher);
          if (PublisherLocationElement != null) yield return new ElementValue("publisherLocation", PublisherLocationElement);
          if (StartDateElement != null) yield return new ElementValue("startDate", StartDateElement);
        }
      }

    }

    /// <summary>
    /// The specific issue in which the cited article resides
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#PublicationFormPeriodicRelease", IsNestedType=true)]
    public partial class PublicationFormPeriodicReleaseComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#PublicationFormPeriodicRelease"; } }

      /// <summary>
      /// Internet or Print
      /// </summary>
      [FhirElement("citedMedium", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept CitedMedium
      {
        get { return _CitedMedium; }
        set { _CitedMedium = value; OnPropertyChanged("CitedMedium"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _CitedMedium;

      /// <summary>
      /// Volume number of journal in which the article is published
      /// </summary>
      [FhirElement("volume", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString VolumeElement
      {
        get { return _VolumeElement; }
        set { _VolumeElement = value; OnPropertyChanged("VolumeElement"); }
      }

      private Hl7.Fhir.Model.FhirString _VolumeElement;

      /// <summary>
      /// Volume number of journal in which the article is published
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Volume
      {
        get { return VolumeElement != null ? VolumeElement.Value : null; }
        set
        {
          if (value == null)
            VolumeElement = null;
          else
            VolumeElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Volume");
        }
      }

      /// <summary>
      /// Issue, part or supplement of journal in which the article is published
      /// </summary>
      [FhirElement("issue", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString IssueElement
      {
        get { return _IssueElement; }
        set { _IssueElement = value; OnPropertyChanged("IssueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _IssueElement;

      /// <summary>
      /// Issue, part or supplement of journal in which the article is published
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Issue
      {
        get { return IssueElement != null ? IssueElement.Value : null; }
        set
        {
          if (value == null)
            IssueElement = null;
          else
            IssueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Issue");
        }
      }

      /// <summary>
      /// Defining the date on which the issue of the journal was published
      /// </summary>
      [FhirElement("dateOfPublication", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Citation.PublicationFormPeriodicReleaseDateOfPublicationComponent DateOfPublication
      {
        get { return _DateOfPublication; }
        set { _DateOfPublication = value; OnPropertyChanged("DateOfPublication"); }
      }

      private Hl7.Fhir.Model.Citation.PublicationFormPeriodicReleaseDateOfPublicationComponent _DateOfPublication;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PublicationFormPeriodicReleaseComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CitedMedium != null) dest.CitedMedium = (Hl7.Fhir.Model.CodeableConcept)CitedMedium.DeepCopy();
        if(VolumeElement != null) dest.VolumeElement = (Hl7.Fhir.Model.FhirString)VolumeElement.DeepCopy();
        if(IssueElement != null) dest.IssueElement = (Hl7.Fhir.Model.FhirString)IssueElement.DeepCopy();
        if(DateOfPublication != null) dest.DateOfPublication = (Hl7.Fhir.Model.Citation.PublicationFormPeriodicReleaseDateOfPublicationComponent)DateOfPublication.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PublicationFormPeriodicReleaseComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PublicationFormPeriodicReleaseComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CitedMedium, otherT.CitedMedium)) return false;
        if( !DeepComparable.Matches(VolumeElement, otherT.VolumeElement)) return false;
        if( !DeepComparable.Matches(IssueElement, otherT.IssueElement)) return false;
        if( !DeepComparable.Matches(DateOfPublication, otherT.DateOfPublication)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PublicationFormPeriodicReleaseComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CitedMedium, otherT.CitedMedium)) return false;
        if( !DeepComparable.IsExactly(VolumeElement, otherT.VolumeElement)) return false;
        if( !DeepComparable.IsExactly(IssueElement, otherT.IssueElement)) return false;
        if( !DeepComparable.IsExactly(DateOfPublication, otherT.DateOfPublication)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CitedMedium != null) yield return CitedMedium;
          if (VolumeElement != null) yield return VolumeElement;
          if (IssueElement != null) yield return IssueElement;
          if (DateOfPublication != null) yield return DateOfPublication;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CitedMedium != null) yield return new ElementValue("citedMedium", CitedMedium);
          if (VolumeElement != null) yield return new ElementValue("volume", VolumeElement);
          if (IssueElement != null) yield return new ElementValue("issue", IssueElement);
          if (DateOfPublication != null) yield return new ElementValue("dateOfPublication", DateOfPublication);
        }
      }

    }

    /// <summary>
    /// Defining the date on which the issue of the journal was published
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#PublicationFormPeriodicReleaseDateOfPublication", IsNestedType=true)]
    public partial class PublicationFormPeriodicReleaseDateOfPublicationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#PublicationFormPeriodicReleaseDateOfPublication"; } }

      /// <summary>
      /// Date on which the issue of the journal was published
      /// </summary>
      [FhirElement("date", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Date DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.Date _DateElement;

      /// <summary>
      /// Date on which the issue of the journal was published
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("Date");
        }
      }

      /// <summary>
      /// Year on which the issue of the journal was published
      /// </summary>
      [FhirElement("year", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString YearElement
      {
        get { return _YearElement; }
        set { _YearElement = value; OnPropertyChanged("YearElement"); }
      }

      private Hl7.Fhir.Model.FhirString _YearElement;

      /// <summary>
      /// Year on which the issue of the journal was published
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Year
      {
        get { return YearElement != null ? YearElement.Value : null; }
        set
        {
          if (value == null)
            YearElement = null;
          else
            YearElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Year");
        }
      }

      /// <summary>
      /// Month on which the issue of the journal was published
      /// </summary>
      [FhirElement("month", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MonthElement
      {
        get { return _MonthElement; }
        set { _MonthElement = value; OnPropertyChanged("MonthElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MonthElement;

      /// <summary>
      /// Month on which the issue of the journal was published
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Month
      {
        get { return MonthElement != null ? MonthElement.Value : null; }
        set
        {
          if (value == null)
            MonthElement = null;
          else
            MonthElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Month");
        }
      }

      /// <summary>
      /// Day on which the issue of the journal was published
      /// </summary>
      [FhirElement("day", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DayElement
      {
        get { return _DayElement; }
        set { _DayElement = value; OnPropertyChanged("DayElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DayElement;

      /// <summary>
      /// Day on which the issue of the journal was published
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Day
      {
        get { return DayElement != null ? DayElement.Value : null; }
        set
        {
          if (value == null)
            DayElement = null;
          else
            DayElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Day");
        }
      }

      /// <summary>
      /// Season on which the issue of the journal was published
      /// </summary>
      [FhirElement("season", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString SeasonElement
      {
        get { return _SeasonElement; }
        set { _SeasonElement = value; OnPropertyChanged("SeasonElement"); }
      }

      private Hl7.Fhir.Model.FhirString _SeasonElement;

      /// <summary>
      /// Season on which the issue of the journal was published
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Season
      {
        get { return SeasonElement != null ? SeasonElement.Value : null; }
        set
        {
          if (value == null)
            SeasonElement = null;
          else
            SeasonElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Season");
        }
      }

      /// <summary>
      /// Text representation of the date of which the issue of the journal was published
      /// </summary>
      [FhirElement("text", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TextElement
      {
        get { return _TextElement; }
        set { _TextElement = value; OnPropertyChanged("TextElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TextElement;

      /// <summary>
      /// Text representation of the date of which the issue of the journal was published
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Text
      {
        get { return TextElement != null ? TextElement.Value : null; }
        set
        {
          if (value == null)
            TextElement = null;
          else
            TextElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Text");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PublicationFormPeriodicReleaseDateOfPublicationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.Date)DateElement.DeepCopy();
        if(YearElement != null) dest.YearElement = (Hl7.Fhir.Model.FhirString)YearElement.DeepCopy();
        if(MonthElement != null) dest.MonthElement = (Hl7.Fhir.Model.FhirString)MonthElement.DeepCopy();
        if(DayElement != null) dest.DayElement = (Hl7.Fhir.Model.FhirString)DayElement.DeepCopy();
        if(SeasonElement != null) dest.SeasonElement = (Hl7.Fhir.Model.FhirString)SeasonElement.DeepCopy();
        if(TextElement != null) dest.TextElement = (Hl7.Fhir.Model.FhirString)TextElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PublicationFormPeriodicReleaseDateOfPublicationComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PublicationFormPeriodicReleaseDateOfPublicationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.Matches(YearElement, otherT.YearElement)) return false;
        if( !DeepComparable.Matches(MonthElement, otherT.MonthElement)) return false;
        if( !DeepComparable.Matches(DayElement, otherT.DayElement)) return false;
        if( !DeepComparable.Matches(SeasonElement, otherT.SeasonElement)) return false;
        if( !DeepComparable.Matches(TextElement, otherT.TextElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PublicationFormPeriodicReleaseDateOfPublicationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.IsExactly(YearElement, otherT.YearElement)) return false;
        if( !DeepComparable.IsExactly(MonthElement, otherT.MonthElement)) return false;
        if( !DeepComparable.IsExactly(DayElement, otherT.DayElement)) return false;
        if( !DeepComparable.IsExactly(SeasonElement, otherT.SeasonElement)) return false;
        if( !DeepComparable.IsExactly(TextElement, otherT.TextElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DateElement != null) yield return DateElement;
          if (YearElement != null) yield return YearElement;
          if (MonthElement != null) yield return MonthElement;
          if (DayElement != null) yield return DayElement;
          if (SeasonElement != null) yield return SeasonElement;
          if (TextElement != null) yield return TextElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DateElement != null) yield return new ElementValue("date", DateElement);
          if (YearElement != null) yield return new ElementValue("year", YearElement);
          if (MonthElement != null) yield return new ElementValue("month", MonthElement);
          if (DayElement != null) yield return new ElementValue("day", DayElement);
          if (SeasonElement != null) yield return new ElementValue("season", SeasonElement);
          if (TextElement != null) yield return new ElementValue("text", TextElement);
        }
      }

    }

    /// <summary>
    /// Used to support keyword searches
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#KeywordList", IsNestedType=true)]
    public partial class KeywordListComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#KeywordList"; } }

      /// <summary>
      /// Author, publisher, or custodian of the keyword list
      /// </summary>
      [FhirElement("owner", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString OwnerElement
      {
        get { return _OwnerElement; }
        set { _OwnerElement = value; OnPropertyChanged("OwnerElement"); }
      }

      private Hl7.Fhir.Model.FhirString _OwnerElement;

      /// <summary>
      /// Author, publisher, or custodian of the keyword list
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Owner
      {
        get { return OwnerElement != null ? OwnerElement.Value : null; }
        set
        {
          if (value == null)
            OwnerElement = null;
          else
            OwnerElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Owner");
        }
      }

      /// <summary>
      /// For each keyword in the keyword list
      /// </summary>
      [FhirElement("keyword", Order=50)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Citation.KeywordListKeywordComponent> Keyword
      {
        get { if(_Keyword==null) _Keyword = new List<Hl7.Fhir.Model.Citation.KeywordListKeywordComponent>(); return _Keyword; }
        set { _Keyword = value; OnPropertyChanged("Keyword"); }
      }

      private List<Hl7.Fhir.Model.Citation.KeywordListKeywordComponent> _Keyword;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as KeywordListComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(OwnerElement != null) dest.OwnerElement = (Hl7.Fhir.Model.FhirString)OwnerElement.DeepCopy();
        if(Keyword != null) dest.Keyword = new List<Hl7.Fhir.Model.Citation.KeywordListKeywordComponent>(Keyword.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new KeywordListComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as KeywordListComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(OwnerElement, otherT.OwnerElement)) return false;
        if( !DeepComparable.Matches(Keyword, otherT.Keyword)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as KeywordListComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(OwnerElement, otherT.OwnerElement)) return false;
        if( !DeepComparable.IsExactly(Keyword, otherT.Keyword)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (OwnerElement != null) yield return OwnerElement;
          foreach (var elem in Keyword) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (OwnerElement != null) yield return new ElementValue("owner", OwnerElement);
          foreach (var elem in Keyword) { if (elem != null) yield return new ElementValue("keyword", elem); }
        }
      }

    }

    /// <summary>
    /// For each keyword in the keyword list
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#KeywordListKeyword", IsNestedType=true)]
    public partial class KeywordListKeywordComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#KeywordListKeyword"; } }

      /// <summary>
      /// Whether or not it is a major topic
      /// </summary>
      [FhirElement("majorTopic", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean MajorTopicElement
      {
        get { return _MajorTopicElement; }
        set { _MajorTopicElement = value; OnPropertyChanged("MajorTopicElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _MajorTopicElement;

      /// <summary>
      /// Whether or not it is a major topic
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? MajorTopic
      {
        get { return MajorTopicElement != null ? MajorTopicElement.Value : null; }
        set
        {
          if (value == null)
            MajorTopicElement = null;
          else
            MajorTopicElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("MajorTopic");
        }
      }

      /// <summary>
      /// The actual keyword
      /// </summary>
      [FhirElement("value", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// The actual keyword
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as KeywordListKeywordComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(MajorTopicElement != null) dest.MajorTopicElement = (Hl7.Fhir.Model.FhirBoolean)MajorTopicElement.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new KeywordListKeywordComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as KeywordListKeywordComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(MajorTopicElement, otherT.MajorTopicElement)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as KeywordListKeywordComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(MajorTopicElement, otherT.MajorTopicElement)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (MajorTopicElement != null) yield return MajorTopicElement;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (MajorTopicElement != null) yield return new ElementValue("majorTopic", MajorTopicElement);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

    }

    /// <summary>
    /// These elements are items with values assigned by MEDLINE or PubMed management
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#Medline", IsNestedType=true)]
    public partial class MedlineComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#Medline"; } }

      /// <summary>
      /// Completed | In-Process | PubMed-not-MEDLINE | In-Data-Review | Publisher | MEDLINE | OLDMEDLINE
      /// </summary>
      [FhirElement("state", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.Citation.MedlineCitationStatus> StateElement
      {
        get { return _StateElement; }
        set { _StateElement = value; OnPropertyChanged("StateElement"); }
      }

      private Code<Hl7.Fhir.Model.Citation.MedlineCitationStatus> _StateElement;

      /// <summary>
      /// Completed | In-Process | PubMed-not-MEDLINE | In-Data-Review | Publisher | MEDLINE | OLDMEDLINE
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.Citation.MedlineCitationStatus? State
      {
        get { return StateElement != null ? StateElement.Value : null; }
        set
        {
          if (value == null)
            StateElement = null;
          else
            StateElement = new Code<Hl7.Fhir.Model.Citation.MedlineCitationStatus>(value);
          OnPropertyChanged("State");
        }
      }

      /// <summary>
      /// NLM | NASA | PIP | KIE | HSR | HMD | SIS | NOTNLM
      /// </summary>
      [FhirElement("owner", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.Citation.MedlineCitationOwner> OwnerElement
      {
        get { return _OwnerElement; }
        set { _OwnerElement = value; OnPropertyChanged("OwnerElement"); }
      }

      private Code<Hl7.Fhir.Model.Citation.MedlineCitationOwner> _OwnerElement;

      /// <summary>
      /// NLM | NASA | PIP | KIE | HSR | HMD | SIS | NOTNLM
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.Citation.MedlineCitationOwner? Owner
      {
        get { return OwnerElement != null ? OwnerElement.Value : null; }
        set
        {
          if (value == null)
            OwnerElement = null;
          else
            OwnerElement = new Code<Hl7.Fhir.Model.Citation.MedlineCitationOwner>(value);
          OnPropertyChanged("Owner");
        }
      }

      /// <summary>
      /// Creation date
      /// </summary>
      [FhirElement("dateCreated", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Date DateCreatedElement
      {
        get { return _DateCreatedElement; }
        set { _DateCreatedElement = value; OnPropertyChanged("DateCreatedElement"); }
      }

      private Hl7.Fhir.Model.Date _DateCreatedElement;

      /// <summary>
      /// Creation date
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DateCreated
      {
        get { return DateCreatedElement != null ? DateCreatedElement.Value : null; }
        set
        {
          if (value == null)
            DateCreatedElement = null;
          else
            DateCreatedElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("DateCreated");
        }
      }

      /// <summary>
      /// Completion date
      /// </summary>
      [FhirElement("dateCompleted", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Date DateCompletedElement
      {
        get { return _DateCompletedElement; }
        set { _DateCompletedElement = value; OnPropertyChanged("DateCompletedElement"); }
      }

      private Hl7.Fhir.Model.Date _DateCompletedElement;

      /// <summary>
      /// Completion date
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DateCompleted
      {
        get { return DateCompletedElement != null ? DateCompletedElement.Value : null; }
        set
        {
          if (value == null)
            DateCompletedElement = null;
          else
            DateCompletedElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("DateCompleted");
        }
      }

      /// <summary>
      /// Revision date
      /// </summary>
      [FhirElement("dateRevised", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Date DateRevisedElement
      {
        get { return _DateRevisedElement; }
        set { _DateRevisedElement = value; OnPropertyChanged("DateRevisedElement"); }
      }

      private Hl7.Fhir.Model.Date _DateRevisedElement;

      /// <summary>
      /// Revision date
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DateRevised
      {
        get { return DateRevisedElement != null ? DateRevisedElement.Value : null; }
        set
        {
          if (value == null)
            DateRevisedElement = null;
          else
            DateRevisedElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("DateRevised");
        }
      }

      /// <summary>
      /// Date of PubMed publication
      /// </summary>
      [FhirElement("dateOnPubMed", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Citation.MedlineDateOnPubMedComponent> DateOnPubMed
      {
        get { if(_DateOnPubMed==null) _DateOnPubMed = new List<Hl7.Fhir.Model.Citation.MedlineDateOnPubMedComponent>(); return _DateOnPubMed; }
        set { _DateOnPubMed = value; OnPropertyChanged("DateOnPubMed"); }
      }

      private List<Hl7.Fhir.Model.Citation.MedlineDateOnPubMedComponent> _DateOnPubMed;

      /// <summary>
      /// received | accepted | epublish | ppublish | revised | aheadofprint | retracted | ecollection | pmc | pmcr | pubmed | pubmedr | premedline | medline | medliner | entrez | pmc-release
      /// </summary>
      [FhirElement("publicationState", Order=100)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.Citation.PubMedPubStatus> PublicationStateElement
      {
        get { return _PublicationStateElement; }
        set { _PublicationStateElement = value; OnPropertyChanged("PublicationStateElement"); }
      }

      private Code<Hl7.Fhir.Model.Citation.PubMedPubStatus> _PublicationStateElement;

      /// <summary>
      /// received | accepted | epublish | ppublish | revised | aheadofprint | retracted | ecollection | pmc | pmcr | pubmed | pubmedr | premedline | medline | medliner | entrez | pmc-release
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.Citation.PubMedPubStatus? PublicationState
      {
        get { return PublicationStateElement != null ? PublicationStateElement.Value : null; }
        set
        {
          if (value == null)
            PublicationStateElement = null;
          else
            PublicationStateElement = new Code<Hl7.Fhir.Model.Citation.PubMedPubStatus>(value);
          OnPropertyChanged("PublicationState");
        }
      }

      /// <summary>
      /// Citation details for the related article
      /// </summary>
      [FhirElement("relatedArticle", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Citation.MedlineRelatedArticleComponent> RelatedArticle
      {
        get { if(_RelatedArticle==null) _RelatedArticle = new List<Hl7.Fhir.Model.Citation.MedlineRelatedArticleComponent>(); return _RelatedArticle; }
        set { _RelatedArticle = value; OnPropertyChanged("RelatedArticle"); }
      }

      private List<Hl7.Fhir.Model.Citation.MedlineRelatedArticleComponent> _RelatedArticle;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MedlineComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(StateElement != null) dest.StateElement = (Code<Hl7.Fhir.Model.Citation.MedlineCitationStatus>)StateElement.DeepCopy();
        if(OwnerElement != null) dest.OwnerElement = (Code<Hl7.Fhir.Model.Citation.MedlineCitationOwner>)OwnerElement.DeepCopy();
        if(DateCreatedElement != null) dest.DateCreatedElement = (Hl7.Fhir.Model.Date)DateCreatedElement.DeepCopy();
        if(DateCompletedElement != null) dest.DateCompletedElement = (Hl7.Fhir.Model.Date)DateCompletedElement.DeepCopy();
        if(DateRevisedElement != null) dest.DateRevisedElement = (Hl7.Fhir.Model.Date)DateRevisedElement.DeepCopy();
        if(DateOnPubMed != null) dest.DateOnPubMed = new List<Hl7.Fhir.Model.Citation.MedlineDateOnPubMedComponent>(DateOnPubMed.DeepCopy());
        if(PublicationStateElement != null) dest.PublicationStateElement = (Code<Hl7.Fhir.Model.Citation.PubMedPubStatus>)PublicationStateElement.DeepCopy();
        if(RelatedArticle != null) dest.RelatedArticle = new List<Hl7.Fhir.Model.Citation.MedlineRelatedArticleComponent>(RelatedArticle.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MedlineComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MedlineComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(StateElement, otherT.StateElement)) return false;
        if( !DeepComparable.Matches(OwnerElement, otherT.OwnerElement)) return false;
        if( !DeepComparable.Matches(DateCreatedElement, otherT.DateCreatedElement)) return false;
        if( !DeepComparable.Matches(DateCompletedElement, otherT.DateCompletedElement)) return false;
        if( !DeepComparable.Matches(DateRevisedElement, otherT.DateRevisedElement)) return false;
        if( !DeepComparable.Matches(DateOnPubMed, otherT.DateOnPubMed)) return false;
        if( !DeepComparable.Matches(PublicationStateElement, otherT.PublicationStateElement)) return false;
        if( !DeepComparable.Matches(RelatedArticle, otherT.RelatedArticle)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MedlineComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(StateElement, otherT.StateElement)) return false;
        if( !DeepComparable.IsExactly(OwnerElement, otherT.OwnerElement)) return false;
        if( !DeepComparable.IsExactly(DateCreatedElement, otherT.DateCreatedElement)) return false;
        if( !DeepComparable.IsExactly(DateCompletedElement, otherT.DateCompletedElement)) return false;
        if( !DeepComparable.IsExactly(DateRevisedElement, otherT.DateRevisedElement)) return false;
        if( !DeepComparable.IsExactly(DateOnPubMed, otherT.DateOnPubMed)) return false;
        if( !DeepComparable.IsExactly(PublicationStateElement, otherT.PublicationStateElement)) return false;
        if( !DeepComparable.IsExactly(RelatedArticle, otherT.RelatedArticle)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (StateElement != null) yield return StateElement;
          if (OwnerElement != null) yield return OwnerElement;
          if (DateCreatedElement != null) yield return DateCreatedElement;
          if (DateCompletedElement != null) yield return DateCompletedElement;
          if (DateRevisedElement != null) yield return DateRevisedElement;
          foreach (var elem in DateOnPubMed) { if (elem != null) yield return elem; }
          if (PublicationStateElement != null) yield return PublicationStateElement;
          foreach (var elem in RelatedArticle) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (StateElement != null) yield return new ElementValue("state", StateElement);
          if (OwnerElement != null) yield return new ElementValue("owner", OwnerElement);
          if (DateCreatedElement != null) yield return new ElementValue("dateCreated", DateCreatedElement);
          if (DateCompletedElement != null) yield return new ElementValue("dateCompleted", DateCompletedElement);
          if (DateRevisedElement != null) yield return new ElementValue("dateRevised", DateRevisedElement);
          foreach (var elem in DateOnPubMed) { if (elem != null) yield return new ElementValue("dateOnPubMed", elem); }
          if (PublicationStateElement != null) yield return new ElementValue("publicationState", PublicationStateElement);
          foreach (var elem in RelatedArticle) { if (elem != null) yield return new ElementValue("relatedArticle", elem); }
        }
      }

    }

    /// <summary>
    /// Date of PubMed publication
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#MedlineDateOnPubMed", IsNestedType=true)]
    public partial class MedlineDateOnPubMedComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#MedlineDateOnPubMed"; } }

      /// <summary>
      /// received | accepted | epublish | ppublish | revised | aheadofprint | retracted | ecollection | pmc | pmcr | pubmed | pubmedr | premedline | medline | medliner | entrez | pmc-release
      /// </summary>
      [FhirElement("publicationState", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.Citation.PubMedPubStatus> PublicationStateElement
      {
        get { return _PublicationStateElement; }
        set { _PublicationStateElement = value; OnPropertyChanged("PublicationStateElement"); }
      }

      private Code<Hl7.Fhir.Model.Citation.PubMedPubStatus> _PublicationStateElement;

      /// <summary>
      /// received | accepted | epublish | ppublish | revised | aheadofprint | retracted | ecollection | pmc | pmcr | pubmed | pubmedr | premedline | medline | medliner | entrez | pmc-release
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.Citation.PubMedPubStatus? PublicationState
      {
        get { return PublicationStateElement != null ? PublicationStateElement.Value : null; }
        set
        {
          if (value == null)
            PublicationStateElement = null;
          else
            PublicationStateElement = new Code<Hl7.Fhir.Model.Citation.PubMedPubStatus>(value);
          OnPropertyChanged("PublicationState");
        }
      }

      /// <summary>
      /// PubMed Publication Date
      /// </summary>
      [FhirElement("date", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _DateElement;

      /// <summary>
      /// PubMed Publication Date
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Date");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MedlineDateOnPubMedComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(PublicationStateElement != null) dest.PublicationStateElement = (Code<Hl7.Fhir.Model.Citation.PubMedPubStatus>)PublicationStateElement.DeepCopy();
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MedlineDateOnPubMedComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MedlineDateOnPubMedComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(PublicationStateElement, otherT.PublicationStateElement)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MedlineDateOnPubMedComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(PublicationStateElement, otherT.PublicationStateElement)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (PublicationStateElement != null) yield return PublicationStateElement;
          if (DateElement != null) yield return DateElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (PublicationStateElement != null) yield return new ElementValue("publicationState", PublicationStateElement);
          if (DateElement != null) yield return new ElementValue("date", DateElement);
        }
      }

    }

    /// <summary>
    /// Citation details for the related article
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Citation#MedlineRelatedArticle", IsNestedType=true)]
    public partial class MedlineRelatedArticleComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Citation#MedlineRelatedArticle"; } }

      /// <summary>
      /// Citation Resource for related article
      /// </summary>
      [FhirElement("citationReference", Order=40)]
      [CLSCompliant(false)]
      [References("Citation")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference CitationReference
      {
        get { return _CitationReference; }
        set { _CitationReference = value; OnPropertyChanged("CitationReference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _CitationReference;

      /// <summary>
      /// Citation string for related article
      /// </summary>
      [FhirElement("citationMarkdown", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown CitationMarkdown
      {
        get { return _CitationMarkdown; }
        set { _CitationMarkdown = value; OnPropertyChanged("CitationMarkdown"); }
      }

      private Hl7.Fhir.Model.Markdown _CitationMarkdown;

      /// <summary>
      /// Citation identifier for the related article
      /// </summary>
      [FhirElement("identifier", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> Identifier
      {
        get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _Identifier;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MedlineRelatedArticleComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CitationReference != null) dest.CitationReference = (Hl7.Fhir.Model.ResourceReference)CitationReference.DeepCopy();
        if(CitationMarkdown != null) dest.CitationMarkdown = (Hl7.Fhir.Model.Markdown)CitationMarkdown.DeepCopy();
        if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MedlineRelatedArticleComponent());
      }

      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MedlineRelatedArticleComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CitationReference, otherT.CitationReference)) return false;
        if( !DeepComparable.Matches(CitationMarkdown, otherT.CitationMarkdown)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MedlineRelatedArticleComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CitationReference, otherT.CitationReference)) return false;
        if( !DeepComparable.IsExactly(CitationMarkdown, otherT.CitationMarkdown)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CitationReference != null) yield return CitationReference;
          if (CitationMarkdown != null) yield return CitationMarkdown;
          foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CitationReference != null) yield return new ElementValue("citationReference", CitationReference);
          if (CitationMarkdown != null) yield return new ElementValue("citationMarkdown", CitationMarkdown);
          foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        }
      }

    }

    /// <summary>
    /// Canonical identifier for this citation, represented as a globally unique URI
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this citation, represented as a globally unique URI
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// May include DOI, PMID, PMCID, etc.
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// May include trial registry identifiers
    /// </summary>
    [FhirElement("relatedIdentifier", InSummary=true, Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> RelatedIdentifier
    {
      get { if(_RelatedIdentifier==null) _RelatedIdentifier = new List<Hl7.Fhir.Model.Identifier>(); return _RelatedIdentifier; }
      set { _RelatedIdentifier = value; OnPropertyChanged("RelatedIdentifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _RelatedIdentifier;

    /// <summary>
    /// Business version of the citation
    /// </summary>
    [FhirElement("version", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the citation
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this citation (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this citation (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this citation (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this citation (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, Order=150)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=160)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=170)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// The publisher of the Citation, not the publisher of the article being cited
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// The publisher of the Citation, not the publisher of the article being cited
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the citation
    /// </summary>
    [FhirElement("description", Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Description
    {
      get { return _Description; }
      set { _Description = value; OnPropertyChanged("Description"); }
    }

    private Hl7.Fhir.Model.Markdown _Description;

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for citation (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this citation is defined
    /// </summary>
    [FhirElement("purpose", Order=230)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Purpose
    {
      get { return _Purpose; }
      set { _Purpose = value; OnPropertyChanged("Purpose"); }
    }

    private Hl7.Fhir.Model.Markdown _Purpose;

    /// <summary>
    /// When the citation was approved by publisher
    /// </summary>
    [FhirElement("approvalDate", Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.Date ApprovalDateElement
    {
      get { return _ApprovalDateElement; }
      set { _ApprovalDateElement = value; OnPropertyChanged("ApprovalDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ApprovalDateElement;

    /// <summary>
    /// When the citation was approved by publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ApprovalDate
    {
      get { return ApprovalDateElement != null ? ApprovalDateElement.Value : null; }
      set
      {
        if (value == null)
          ApprovalDateElement = null;
        else
          ApprovalDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ApprovalDate");
      }
    }

    /// <summary>
    /// When the citation was last reviewed
    /// </summary>
    [FhirElement("lastReviewDate", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.Date LastReviewDateElement
    {
      get { return _LastReviewDateElement; }
      set { _LastReviewDateElement = value; OnPropertyChanged("LastReviewDateElement"); }
    }

    private Hl7.Fhir.Model.Date _LastReviewDateElement;

    /// <summary>
    /// When the citation was last reviewed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastReviewDate
    {
      get { return LastReviewDateElement != null ? LastReviewDateElement.Value : null; }
      set
      {
        if (value == null)
          LastReviewDateElement = null;
        else
          LastReviewDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("LastReviewDate");
      }
    }

    /// <summary>
    /// When the citation is expected to be used
    /// </summary>
    [FhirElement("effectivePeriod", InSummary=true, Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.Period EffectivePeriod
    {
      get { return _EffectivePeriod; }
      set { _EffectivePeriod = value; OnPropertyChanged("EffectivePeriod"); }
    }

    private Hl7.Fhir.Model.Period _EffectivePeriod;

    /// <summary>
    /// A human-readable display of the citation
    /// </summary>
    [FhirElement("summary", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Citation.SummaryComponent> Summary
    {
      get { if(_Summary==null) _Summary = new List<Hl7.Fhir.Model.Citation.SummaryComponent>(); return _Summary; }
      set { _Summary = value; OnPropertyChanged("Summary"); }
    }

    private List<Hl7.Fhir.Model.Citation.SummaryComponent> _Summary;

    /// <summary>
    /// When the citation was cited
    /// </summary>
    [FhirElement("dateCited", InSummary=true, Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateCitedElement
    {
      get { return _DateCitedElement; }
      set { _DateCitedElement = value; OnPropertyChanged("DateCitedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateCitedElement;

    /// <summary>
    /// When the citation was cited
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string DateCited
    {
      get { return DateCitedElement != null ? DateCitedElement.Value : null; }
      set
      {
        if (value == null)
          DateCitedElement = null;
        else
          DateCitedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("DateCited");
      }
    }

    /// <summary>
    /// An alternative variant of the citation
    /// </summary>
    [FhirElement("variantCitation", Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.Citation.VariantCitationComponent VariantCitation
    {
      get { return _VariantCitation; }
      set { _VariantCitation = value; OnPropertyChanged("VariantCitation"); }
    }

    private Hl7.Fhir.Model.Citation.VariantCitationComponent _VariantCitation;

    /// <summary>
    /// The name of the article
    /// </summary>
    [FhirElement("articleTitle", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Citation.ArticleTitleComponent> ArticleTitle
    {
      get { if(_ArticleTitle==null) _ArticleTitle = new List<Hl7.Fhir.Model.Citation.ArticleTitleComponent>(); return _ArticleTitle; }
      set { _ArticleTitle = value; OnPropertyChanged("ArticleTitle"); }
    }

    private List<Hl7.Fhir.Model.Citation.ArticleTitleComponent> _ArticleTitle;

    /// <summary>
    /// Used for any URL for the article cited
    /// </summary>
    [FhirElement("webLocation", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Citation.WebLocationComponent> WebLocation
    {
      get { if(_WebLocation==null) _WebLocation = new List<Hl7.Fhir.Model.Citation.WebLocationComponent>(); return _WebLocation; }
      set { _WebLocation = value; OnPropertyChanged("WebLocation"); }
    }

    private List<Hl7.Fhir.Model.Citation.WebLocationComponent> _WebLocation;

    /// <summary>
    /// Publisher-provided summary of the article
    /// </summary>
    [FhirElement("abstract", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Citation.AbstractComponent> Abstract
    {
      get { if(_Abstract==null) _Abstract = new List<Hl7.Fhir.Model.Citation.AbstractComponent>(); return _Abstract; }
      set { _Abstract = value; OnPropertyChanged("Abstract"); }
    }

    private List<Hl7.Fhir.Model.Citation.AbstractComponent> _Abstract;

    /// <summary>
    /// Attribution of authors and other contributors
    /// </summary>
    [FhirElement("contributorship", Order=330)]
    [DataMember]
    public Hl7.Fhir.Model.Citation.ContributorshipComponent Contributorship
    {
      get { return _Contributorship; }
      set { _Contributorship = value; OnPropertyChanged("Contributorship"); }
    }

    private Hl7.Fhir.Model.Citation.ContributorshipComponent _Contributorship;

    /// <summary>
    /// If multiple, used to represent alternative forms of the article that are not separate citations
    /// </summary>
    [FhirElement("publicationForm", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Citation.PublicationFormComponent> PublicationForm
    {
      get { if(_PublicationForm==null) _PublicationForm = new List<Hl7.Fhir.Model.Citation.PublicationFormComponent>(); return _PublicationForm; }
      set { _PublicationForm = value; OnPropertyChanged("PublicationForm"); }
    }

    private List<Hl7.Fhir.Model.Citation.PublicationFormComponent> _PublicationForm;

    /// <summary>
    /// Used for many classifiers including PublicationType, CitationSubset, MeshHeading, Chemical
    /// </summary>
    [FhirElement("classifier", Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Classifier
    {
      get { if(_Classifier==null) _Classifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Classifier; }
      set { _Classifier = value; OnPropertyChanged("Classifier"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Classifier;

    /// <summary>
    /// Used to support keyword searches
    /// </summary>
    [FhirElement("keywordList", Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Citation.KeywordListComponent> KeywordList
    {
      get { if(_KeywordList==null) _KeywordList = new List<Hl7.Fhir.Model.Citation.KeywordListComponent>(); return _KeywordList; }
      set { _KeywordList = value; OnPropertyChanged("KeywordList"); }
    }

    private List<Hl7.Fhir.Model.Citation.KeywordListComponent> _KeywordList;

    /// <summary>
    /// Link or citation to artifact associated with the referenced material
    /// </summary>
    [FhirElement("relatedArtifact", Order=370)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
    {
      get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
      set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

    /// <summary>
    /// Used for general notes and annotations not coded elsewhere
    /// </summary>
    [FhirElement("note", Order=380)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// These elements are items with values assigned by MEDLINE or PubMed management
    /// </summary>
    [FhirElement("medline", Order=390)]
    [DataMember]
    public Hl7.Fhir.Model.Citation.MedlineComponent Medline
    {
      get { return _Medline; }
      set { _Medline = value; OnPropertyChanged("Medline"); }
    }

    private Hl7.Fhir.Model.Citation.MedlineComponent _Medline;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Citation;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(RelatedIdentifier != null) dest.RelatedIdentifier = new List<Hl7.Fhir.Model.Identifier>(RelatedIdentifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(Description != null) dest.Description = (Hl7.Fhir.Model.Markdown)Description.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(Purpose != null) dest.Purpose = (Hl7.Fhir.Model.Markdown)Purpose.DeepCopy();
      if(ApprovalDateElement != null) dest.ApprovalDateElement = (Hl7.Fhir.Model.Date)ApprovalDateElement.DeepCopy();
      if(LastReviewDateElement != null) dest.LastReviewDateElement = (Hl7.Fhir.Model.Date)LastReviewDateElement.DeepCopy();
      if(EffectivePeriod != null) dest.EffectivePeriod = (Hl7.Fhir.Model.Period)EffectivePeriod.DeepCopy();
      if(Summary != null) dest.Summary = new List<Hl7.Fhir.Model.Citation.SummaryComponent>(Summary.DeepCopy());
      if(DateCitedElement != null) dest.DateCitedElement = (Hl7.Fhir.Model.FhirDateTime)DateCitedElement.DeepCopy();
      if(VariantCitation != null) dest.VariantCitation = (Hl7.Fhir.Model.Citation.VariantCitationComponent)VariantCitation.DeepCopy();
      if(ArticleTitle != null) dest.ArticleTitle = new List<Hl7.Fhir.Model.Citation.ArticleTitleComponent>(ArticleTitle.DeepCopy());
      if(WebLocation != null) dest.WebLocation = new List<Hl7.Fhir.Model.Citation.WebLocationComponent>(WebLocation.DeepCopy());
      if(Abstract != null) dest.Abstract = new List<Hl7.Fhir.Model.Citation.AbstractComponent>(Abstract.DeepCopy());
      if(Contributorship != null) dest.Contributorship = (Hl7.Fhir.Model.Citation.ContributorshipComponent)Contributorship.DeepCopy();
      if(PublicationForm != null) dest.PublicationForm = new List<Hl7.Fhir.Model.Citation.PublicationFormComponent>(PublicationForm.DeepCopy());
      if(Classifier != null) dest.Classifier = new List<Hl7.Fhir.Model.CodeableConcept>(Classifier.DeepCopy());
      if(KeywordList != null) dest.KeywordList = new List<Hl7.Fhir.Model.Citation.KeywordListComponent>(KeywordList.DeepCopy());
      if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Medline != null) dest.Medline = (Hl7.Fhir.Model.Citation.MedlineComponent)Medline.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Citation());
    }

    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Citation;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(RelatedIdentifier, otherT.RelatedIdentifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(Description, otherT.Description)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.Matches(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.Matches(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.Matches(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.Matches(Summary, otherT.Summary)) return false;
      if( !DeepComparable.Matches(DateCitedElement, otherT.DateCitedElement)) return false;
      if( !DeepComparable.Matches(VariantCitation, otherT.VariantCitation)) return false;
      if( !DeepComparable.Matches(ArticleTitle, otherT.ArticleTitle)) return false;
      if( !DeepComparable.Matches(WebLocation, otherT.WebLocation)) return false;
      if( !DeepComparable.Matches(Abstract, otherT.Abstract)) return false;
      if( !DeepComparable.Matches(Contributorship, otherT.Contributorship)) return false;
      if( !DeepComparable.Matches(PublicationForm, otherT.PublicationForm)) return false;
      if( !DeepComparable.Matches(Classifier, otherT.Classifier)) return false;
      if( !DeepComparable.Matches(KeywordList, otherT.KeywordList)) return false;
      if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Medline, otherT.Medline)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Citation;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(RelatedIdentifier, otherT.RelatedIdentifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.IsExactly(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.IsExactly(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.IsExactly(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.IsExactly(Summary, otherT.Summary)) return false;
      if( !DeepComparable.IsExactly(DateCitedElement, otherT.DateCitedElement)) return false;
      if( !DeepComparable.IsExactly(VariantCitation, otherT.VariantCitation)) return false;
      if( !DeepComparable.IsExactly(ArticleTitle, otherT.ArticleTitle)) return false;
      if( !DeepComparable.IsExactly(WebLocation, otherT.WebLocation)) return false;
      if( !DeepComparable.IsExactly(Abstract, otherT.Abstract)) return false;
      if( !DeepComparable.IsExactly(Contributorship, otherT.Contributorship)) return false;
      if( !DeepComparable.IsExactly(PublicationForm, otherT.PublicationForm)) return false;
      if( !DeepComparable.IsExactly(Classifier, otherT.Classifier)) return false;
      if( !DeepComparable.IsExactly(KeywordList, otherT.KeywordList)) return false;
      if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Medline, otherT.Medline)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedIdentifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (Description != null) yield return Description;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (Purpose != null) yield return Purpose;
        if (ApprovalDateElement != null) yield return ApprovalDateElement;
        if (LastReviewDateElement != null) yield return LastReviewDateElement;
        if (EffectivePeriod != null) yield return EffectivePeriod;
        foreach (var elem in Summary) { if (elem != null) yield return elem; }
        if (DateCitedElement != null) yield return DateCitedElement;
        if (VariantCitation != null) yield return VariantCitation;
        foreach (var elem in ArticleTitle) { if (elem != null) yield return elem; }
        foreach (var elem in WebLocation) { if (elem != null) yield return elem; }
        foreach (var elem in Abstract) { if (elem != null) yield return elem; }
        if (Contributorship != null) yield return Contributorship;
        foreach (var elem in PublicationForm) { if (elem != null) yield return elem; }
        foreach (var elem in Classifier) { if (elem != null) yield return elem; }
        foreach (var elem in KeywordList) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        if (Medline != null) yield return Medline;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in RelatedIdentifier) { if (elem != null) yield return new ElementValue("relatedIdentifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (Description != null) yield return new ElementValue("description", Description);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (Purpose != null) yield return new ElementValue("purpose", Purpose);
        if (ApprovalDateElement != null) yield return new ElementValue("approvalDate", ApprovalDateElement);
        if (LastReviewDateElement != null) yield return new ElementValue("lastReviewDate", LastReviewDateElement);
        if (EffectivePeriod != null) yield return new ElementValue("effectivePeriod", EffectivePeriod);
        foreach (var elem in Summary) { if (elem != null) yield return new ElementValue("summary", elem); }
        if (DateCitedElement != null) yield return new ElementValue("dateCited", DateCitedElement);
        if (VariantCitation != null) yield return new ElementValue("variantCitation", VariantCitation);
        foreach (var elem in ArticleTitle) { if (elem != null) yield return new ElementValue("articleTitle", elem); }
        foreach (var elem in WebLocation) { if (elem != null) yield return new ElementValue("webLocation", elem); }
        foreach (var elem in Abstract) { if (elem != null) yield return new ElementValue("abstract", elem); }
        if (Contributorship != null) yield return new ElementValue("contributorship", Contributorship);
        foreach (var elem in PublicationForm) { if (elem != null) yield return new ElementValue("publicationForm", elem); }
        foreach (var elem in Classifier) { if (elem != null) yield return new ElementValue("classifier", elem); }
        foreach (var elem in KeywordList) { if (elem != null) yield return new ElementValue("keywordList", elem); }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        if (Medline != null) yield return new ElementValue("medline", Medline);
      }
    }

  }

}

// end of file
